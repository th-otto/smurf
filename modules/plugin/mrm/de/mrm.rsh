/*
 * GEM resource C output of mrm
 *
 * created by ORCS 2.18
 */

#if !defined(__GNUC__) || !defined(__mc68000__)
#include <portab.h>
#endif

#ifndef __STDC__
# ifdef __PUREC__
#  define __STDC__ 1
# endif
#endif

#ifdef OS_WINDOWS
#  include <portaes.h>
#  define SHORT _WORD
#  ifdef __WIN32__
#    define _WORD signed short
#  else
#    define _WORD signed int
 #   pragma option -zE_FARDATA
#  endif
#else
#  ifdef __TURBOC__
#    include <aes.h>
#    define CP (_WORD *)
#  endif
#endif

#ifdef OS_UNIX
#  include <portaes.h>
#  define SHORT _WORD
#else
#  ifdef __GNUC__
#    ifndef __PORTAES_H__
#      if __GNUC__ < 4
#        include <aesbind.h>
#        ifndef _WORD
#          define _WORD int
#        endif
#        define CP (char *)
#      else
#        include <mt_gem.h>
#        ifndef _WORD
#          define _WORD short
#        endif
#        define CP (short *)
#      endif
#      define CW (short *)
#    endif
#  endif
#endif


#ifdef __SOZOBONX__
#  include <xgemfast.h>
#else
#  ifdef SOZOBON
#    include <aes.h>
#  endif
#endif

#ifdef MEGAMAX
#  include <gembind.h>
#  include <gemdefs.h>
#  include <obdefs.h>
#  define _WORD int
#  define SHORT int
#endif

#ifndef _VOID
#  define _VOID void
#endif

#ifndef OS_NORMAL
#  define OS_NORMAL 0x0000
#endif
#ifndef OS_SELECTED
#  define OS_SELECTED 0x0001
#endif
#ifndef OS_CROSSED
#  define OS_CROSSED 0x0002
#endif
#ifndef OS_CHECKED
#  define OS_CHECKED 0x0004
#endif
#ifndef OS_DISABLED
#  define OS_DISABLED 0x0008
#endif
#ifndef OS_OUTLINED
#  define OS_OUTLINED 0x0010
#endif
#ifndef OS_SHADOWED
#  define OS_SHADOWED 0x0020
#endif
#ifndef OS_WHITEBAK
#  define OS_WHITEBAK 0x0040
#endif
#ifndef OS_DRAW3D
#  define OS_DRAW3D 0x0080
#endif

#ifndef OF_NONE
#  define OF_NONE 0x0000
#endif
#ifndef OF_SELECTABLE
#  define OF_SELECTABLE 0x0001
#endif
#ifndef OF_DEFAULT
#  define OF_DEFAULT 0x0002
#endif
#ifndef OF_EXIT
#  define OF_EXIT 0x0004
#endif
#ifndef OF_EDITABLE
#  define OF_EDITABLE 0x0008
#endif
#ifndef OF_RBUTTON
#  define OF_RBUTTON 0x0010
#endif
#ifndef OF_LASTOB
#  define OF_LASTOB 0x0020
#endif
#ifndef OF_TOUCHEXIT
#  define OF_TOUCHEXIT 0x0040
#endif
#ifndef OF_HIDETREE
#  define OF_HIDETREE 0x0080
#endif
#ifndef OF_INDIRECT
#  define OF_INDIRECT 0x0100
#endif
#ifndef OF_FL3DIND
#  define OF_FL3DIND 0x0200
#endif
#ifndef OF_FL3DBAK
#  define OF_FL3DBAK 0x0400
#endif
#ifndef OF_FL3DACT
#  define OF_FL3DACT 0x0600
#endif
#ifndef OF_MOVEABLE
#  define OF_MOVEABLE 0x0800
#endif
#ifndef OF_POPUP
#  define OF_POPUP 0x1000
#endif

#ifndef R_CICONBLK
#  define R_CICONBLK 17
#endif
#ifndef R_CICON
#  define R_CICON 18
#endif

#ifndef G_SWBUTTON
#  define G_SWBUTTON 34
#endif
#ifndef G_POPUP
#  define G_POPUP 35
#endif
#ifndef G_EDIT
#  define G_EDIT 37
#endif
#ifndef G_SHORTCUT
#  define G_SHORTCUT 38
#endif
#ifndef G_SLIST
#  define G_SLIST 39
#endif
#ifndef G_EXTBOX
#  define G_EXTBOX 40
#endif
#ifndef G_OBLINK
#  define G_OBLINK 41
#endif

#ifndef _WORD
#  ifdef WORD
#    define _WORD WORD
#  else
#    ifdef __PUREC__
#      define _WORD int
#    else
#      define _WORD short
#    endif
#  endif
#endif

#ifndef _UBYTE
#  define _UBYTE char
#endif

#ifndef _BOOL
#  define _BOOL int
#endif

#ifndef _LONG
#  ifdef LONG
#    define _LONG LONG
#  else
#    define _LONG long
#  endif
#endif

#ifndef _ULONG
#  ifdef ULONG
#    define _ULONG ULONG
#  else
#    define _ULONG unsigned long
#  endif
#endif

#ifndef _LONG_PTR
#  define _LONG_PTR _LONG
#endif

#ifndef C_UNION
#ifdef __PORTAES_H__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __GEMLIB__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __PUREC__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __ALCYON__
#  define C_UNION(x) x
#endif
#endif
#ifndef C_UNION
#  define C_UNION(x) (_LONG_PTR)(x)
#endif

#ifndef SHORT
#  define SHORT short
#endif

#ifndef CP
#  define CP (SHORT *)
#endif

#ifndef CW
#  define CW (_WORD *)
#endif


#undef RSC_STATIC_FILE
#define RSC_STATIC_FILE 1

#include "mrm.h"

#ifndef RSC_NAMED_FUNCTIONS
#  define RSC_NAMED_FUNCTIONS 0
#endif

#ifndef __ALCYON__
#undef defRSHInit
#undef defRSHInitBit
#undef defRSHInitStr
#ifndef RsArraySize
#define RsArraySize(array) (_WORD)(sizeof(array)/sizeof(array[0]))
#define RsPtrArraySize(type, array) (type *)array, RsArraySize(array)
#endif
#define defRSHInit( aa, bb ) RSHInit( aa, bb, RsPtrArraySize(OBJECT *, rs_trindex), RsArraySize(rs_object) )
#define defRSHInitBit( aa, bb ) RSHInitBit( aa, bb, RsPtrArraySize(BITBLK *, rs_frimg) )
#define defRSHInitStr( aa, bb ) RSHInitStr( aa, bb, RsPtrArraySize(_UBYTE *, rs_frstr) )
#endif

#ifdef __STDC__
#ifndef W_Cicon_Setpalette
extern _BOOL W_Cicon_Setpalette(_WORD *_palette);
#endif
#ifndef hrelease_objs
extern void hrelease_objs(OBJECT *_ob, _WORD _num_objs);
#endif
#ifndef hfix_objs
extern void *hfix_objs(RSHDR *_hdr, OBJECT *_ob, _WORD _num_objs);
#endif
#endif

#ifndef RLOCAL
#  if RSC_STATIC_FILE
#    ifdef LOCAL
#      define RLOCAL LOCAL
#    else
#      define RLOCAL static
#    endif
#  else
#    define RLOCAL
#  endif
#endif


#ifndef N_
#  define N_(x)
#endif


#if RSC_STATIC_FILE
#undef NUM_STRINGS
#undef NUM_BB
#undef NUM_IB
#undef NUM_CIB
#undef NUM_CIC
#undef NUM_TI
#undef NUM_FRSTR
#undef NUM_FRIMG
#undef NUM_OBS
#undef NUM_TREE
#undef NUM_UD
#define NUM_STRINGS 74
#define NUM_BB		3
#define NUM_IB		0
#define NUM_CIB     1
#define NUM_CIC     1
#define NUM_TI		24
#define NUM_FRSTR	0
#define NUM_FRIMG	0
#define NUM_OBS     39
#define NUM_TREE	1
#define NUM_UD		0
#endif


static char mrm_string_0[] = "Schrittmodus";
static char mrm_string_1[] = "";
static char mrm_string_2[] = "";
static char mrm_string_3[] = "";
static char mrm_string_4[] = "";
static char mrm_string_5[] = "";
static char mrm_string_6[] = "";
static char mrm_string_7[] = "";
static char mrm_string_8[] = "";
static char mrm_string_9[] = "";
static char mrm_string_10[] = "";
static char mrm_string_11[] = "";
static char mrm_string_12[] = "";
static char mrm_string_13[] = "";
static char mrm_string_14[] = "";
static char mrm_string_15[] = "";
static char mrm_string_16[] = "";
static char mrm_string_17[] = "";
static char mrm_string_18[] = "";
static char mrm_string_19[] = "";
static char mrm_string_20[] = "";
static char mrm_string_21[] = "";
static char mrm_string_22[] = "";
static char mrm_string_23[] = "";
static char mrm_string_24[] = "";
static char mrm_string_25[] = "";
static char mrm_string_26[] = "";
static char mrm_string_27[] = "";
static char mrm_string_28[] = "";
static char mrm_string_29[] = "";
static char mrm_string_30[] = "";
static char mrm_string_31[] = "";
static char mrm_string_32[] = "";
static char mrm_string_33[] = "";
static char mrm_string_34[] = "";
static char mrm_string_35[] = "";
static char mrm_string_36[] = "";
static char mrm_string_37[] = "";
static char mrm_string_38[] = "";
static char mrm_string_39[] = "";
static char mrm_string_40[] = "";
static char mrm_string_41[] = "";
static char mrm_string_42[] = "";
static char mrm_string_43[] = "";
static char mrm_string_44[] = "";
static char mrm_string_45[] = "";
static char mrm_string_46[] = "";
static char mrm_string_47[] = "";
static char mrm_string_48[] = "";
static char mrm_string_49[] = "";
static char mrm_string_50[] = "";
static char mrm_string_51[] = "";
static char mrm_string_52[] = "";
static char mrm_string_53[] = "";
static char mrm_string_54[] = "";
static char mrm_string_55[] = "";
static char mrm_string_56[] = "";
static char mrm_string_57[] = "";
static char mrm_string_58[] = "";
static char mrm_string_59[] = "";
static char mrm_string_60[] = "";
static char mrm_string_61[] = "";
static char mrm_string_62[] = "";
static char mrm_string_63[] = "Modul                     ID  MSG";
static char mrm_string_64[] = "";
static char mrm_string_65[] = "";
static char mrm_string_66[] = "Logfile";
static char mrm_string_67[] = "";
static char mrm_string_68[] = "";
static char mrm_string_69[] = "weiter";
static char mrm_string_70[] = "";
static char mrm_string_71[] = "V1.0";
static char mrm_string_72[] = "";
static char mrm_string_73[] = "";


static _UBYTE mrm_IMAGE0[] = {
0x00, 0x00, 0x1F, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x1F, 0xFF, 0x00, 
0x00, 0x3F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x00, 
0x07, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0x00, 
0x1F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 
0x7F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00};

static _UBYTE mrm_IMAGE1[] = {
0x00, 0x00, 0x1F, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x1F, 0xFF, 0x00, 
0x00, 0x3F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x00, 
0x07, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0x00, 
0x1F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 
0x7F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00};

static _UBYTE mrm_IMAGE2[] = {
0x00, 0x00, 0x1F, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x1F, 0xFF, 0x00, 
0x00, 0x3F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x00, 
0x07, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0x00, 
0x1F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 
0x7F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00};

static _UBYTE mrm_RS0_MMASK[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xDE, 0x1E, 0x03, 0xDE, 0x00, 0x01, 0xF7, 0x87, 0x80, 
0x1F, 0x80, 0x3F, 0x80, 0x7F, 0x00, 0x7F, 0x00, 0x7E, 0xE0, 0x7E, 0x00, 0x07, 0xFF, 0xBF, 0x83, 
0xFE, 0x00, 0x01, 0xFF, 0xEF, 0xE0, 0x7F, 0xE0, 0xFF, 0xE1, 0xFF, 0xC1, 0xFF, 0xC1, 0xFF, 0xE1, 
0xFF, 0x80, 0x07, 0xFF, 0xFF, 0x83, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0xFF, 0xF1, 0xFF, 0xE3, 
0xFF, 0xC3, 0xFF, 0xE3, 0xFF, 0xE3, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xC3, 0xFE, 0x00, 0x01, 0xFF, 
0xFF, 0xF0, 0xF0, 0xF1, 0xF1, 0xF3, 0xE3, 0xE3, 0xE3, 0xE3, 0xFF, 0xE3, 0xC3, 0xC0, 0x07, 0xC7, 
0xC7, 0xC3, 0xFE, 0x00, 0x01, 0xF1, 0xF1, 0xF1, 0xFF, 0xF9, 0xF8, 0x03, 0xF0, 0x00, 0x03, 0xE7, 
0xE7, 0xE7, 0xFF, 0xE0, 0x07, 0xC7, 0xC7, 0xC3, 0xF0, 0x00, 0x01, 0xF1, 0xF1, 0xF1, 0xFF, 0xF8, 
0xFF, 0x81, 0xFF, 0x00, 0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0xE0, 0x07, 0xC7, 0xC7, 0xC3, 0xE0, 0x00, 
0x01, 0xF1, 0xF1, 0xF1, 0xFF, 0xF8, 0x7F, 0xE0, 0xFF, 0xC3, 0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0xE0, 
0x07, 0xC7, 0xC7, 0xC3, 0xE0, 0x00, 0x01, 0xF1, 0xF1, 0xF1, 0xF0, 0x00, 0x07, 0xF0, 0x0F, 0xE7, 
0xF3, 0xE7, 0xC3, 0xE7, 0xC0, 0x00, 0x07, 0xC7, 0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF1, 
0xF0, 0xF9, 0xF1, 0xF3, 0xE3, 0xE7, 0xC3, 0xE7, 0xE7, 0xE7, 0xC3, 0xE0, 0x07, 0xC7, 0xC7, 0xC3, 
0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF0, 0xF9, 0xF1, 0xF1, 0xF3, 0xE3, 0xE7, 0xC7, 0xE3, 0xFF, 0xE3, 
0xE7, 0xC0, 0x07, 0xC7, 0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF0, 0xFF, 0xF0, 0xFF, 0xF1, 
0xFF, 0xE7, 0xFF, 0xE3, 0xFF, 0xE3, 0xFF, 0xC0, 0x07, 0xC7, 0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 
0xF1, 0xF0, 0x7F, 0xE0, 0x7F, 0xE0, 0xFF, 0xC3, 0xFF, 0xE1, 0xFF, 0xE1, 0xFF, 0x80, 0x07, 0xC7, 
0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF0, 0x1F, 0x80, 0x1F, 0x80, 0x3F, 0x01, 0xF3, 0xF0, 
0xFB, 0xE0, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE7, 0xC0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static _UBYTE mrm_RS0_MDATA[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xDE, 0x1E, 0x03, 0xDE, 0x00, 0x01, 0xF7, 0x87, 0x80, 
0x1F, 0x80, 0x3F, 0x80, 0x7F, 0x00, 0x7F, 0x00, 0x7E, 0xE0, 0x7E, 0x00, 0x07, 0xFF, 0xBF, 0x83, 
0xFE, 0x00, 0x01, 0xFF, 0xEF, 0xE0, 0x7F, 0xE0, 0xFF, 0xE1, 0xFF, 0xC1, 0xFF, 0xC1, 0xFF, 0xE1, 
0xFF, 0x80, 0x07, 0xFF, 0xFF, 0x83, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0xFF, 0xF1, 0xFF, 0xE3, 
0xFF, 0xC3, 0xFF, 0xE3, 0xFF, 0xE3, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xC3, 0xFE, 0x00, 0x01, 0xFF, 
0xFF, 0xF0, 0xF0, 0xF1, 0xF1, 0xF3, 0xE3, 0xE3, 0xE3, 0xE3, 0xFF, 0xE3, 0xC3, 0xC0, 0x07, 0xC7, 
0xC7, 0xC3, 0xFE, 0x00, 0x01, 0xF1, 0xF1, 0xF1, 0xFF, 0xF9, 0xF8, 0x03, 0xF0, 0x00, 0x03, 0xE7, 
0xE7, 0xE7, 0xFF, 0xE0, 0x07, 0xC7, 0xC7, 0xC3, 0xF0, 0x00, 0x01, 0xF1, 0xF1, 0xF1, 0xFF, 0xF8, 
0xFF, 0x81, 0xFF, 0x00, 0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0xE0, 0x07, 0xC7, 0xC7, 0xC3, 0xE0, 0x00, 
0x01, 0xF1, 0xF1, 0xF1, 0xFF, 0xF8, 0x7F, 0xE0, 0xFF, 0xC3, 0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0xE0, 
0x07, 0xC7, 0xC7, 0xC3, 0xE0, 0x00, 0x01, 0xF1, 0xF1, 0xF1, 0xF0, 0x00, 0x07, 0xF0, 0x0F, 0xE7, 
0xF3, 0xE7, 0xC3, 0xE7, 0xC0, 0x00, 0x07, 0xC7, 0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF1, 
0xF0, 0xF9, 0xF1, 0xF3, 0xE3, 0xE7, 0xC3, 0xE7, 0xE7, 0xE7, 0xC3, 0xE0, 0x07, 0xC7, 0xC7, 0xC3, 
0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF0, 0xF9, 0xF1, 0xF1, 0xF3, 0xE3, 0xE7, 0xC7, 0xE3, 0xFF, 0xE3, 
0xE7, 0xC0, 0x07, 0xC7, 0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF0, 0xFF, 0xF0, 0xFF, 0xF1, 
0xFF, 0xE7, 0xFF, 0xE3, 0xFF, 0xE3, 0xFF, 0xC0, 0x07, 0xC7, 0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 
0xF1, 0xF0, 0x7F, 0xE0, 0x7F, 0xE0, 0xFF, 0xC3, 0xFF, 0xE1, 0xFF, 0xE1, 0xFF, 0x80, 0x07, 0xC7, 
0xC7, 0xC3, 0xE1, 0xF0, 0x01, 0xF1, 0xF1, 0xF0, 0x1F, 0x80, 0x1F, 0x80, 0x3F, 0x01, 0xF3, 0xF0, 
0xFB, 0xE0, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE7, 0xC0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static _UBYTE mrm_RS0_4CDATA[] = {
0x07, 0xD0, 0x10, 0x07, 0xE1, 0x00, 0x03, 0xF0, 0x48, 0x20, 0x20, 0xC0, 0xC0, 0xC1, 0x85, 0x81, 
0x95, 0x81, 0x5E, 0xB0, 0xD6, 0x00, 0x08, 0x04, 0x06, 0x20, 0x01, 0x00, 0x00, 0x00, 0x50, 0x30, 
0x80, 0x81, 0x01, 0x42, 0x11, 0x04, 0x41, 0x24, 0x08, 0xB2, 0x4A, 0xC0, 0x08, 0x90, 0x10, 0x10, 
0x10, 0x00, 0x02, 0x8A, 0x0A, 0x18, 0x00, 0x20, 0x00, 0x30, 0x00, 0xA8, 0x02, 0xC0, 0x48, 0x44, 
0x21, 0x60, 0x0A, 0x00, 0x00, 0x50, 0x81, 0x00, 0x05, 0x21, 0x00, 0x80, 0x80, 0x01, 0x08, 0x14, 
0x20, 0x44, 0x50, 0x28, 0x22, 0x20, 0x94, 0xA0, 0x08, 0x20, 0x00, 0x02, 0x04, 0x00, 0x00, 0x40, 
0x80, 0x09, 0x0C, 0x90, 0x0C, 0x40, 0x21, 0x2A, 0xB4, 0x25, 0x28, 0xB8, 0x60, 0xB0, 0x0A, 0x00, 
0x0A, 0x10, 0x01, 0x00, 0x00, 0x81, 0x41, 0x40, 0x5E, 0x09, 0x02, 0x22, 0x14, 0x2C, 0x00, 0xA0, 
0x50, 0x45, 0x48, 0x40, 0x08, 0x08, 0x10, 0x02, 0x04, 0x00, 0x03, 0x12, 0x1A, 0x09, 0x00, 0x82, 
0x00, 0x90, 0x01, 0x20, 0x40, 0x20, 0xA0, 0x28, 0x54, 0xB0, 0x08, 0x22, 0x04, 0x10, 0x40, 0x00, 
0x04, 0x80, 0x41, 0x42, 0x20, 0x0C, 0x00, 0x2C, 0x00, 0x50, 0x12, 0x48, 0xC0, 0xB1, 0x09, 0x20, 
0x08, 0xA0, 0x44, 0x00, 0x40, 0x08, 0x04, 0x40, 0x20, 0x89, 0x04, 0x01, 0x00, 0x1A, 0x10, 0x20, 
0x50, 0x20, 0x68, 0x48, 0xAA, 0xB0, 0x0A, 0x32, 0x14, 0x12, 0x11, 0x40, 0x01, 0x12, 0x18, 0x24, 
0x54, 0x06, 0x10, 0x08, 0x80, 0x40, 0x88, 0x51, 0x30, 0x20, 0x79, 0x00, 0x08, 0x22, 0x04, 0x00, 
0x40, 0x20, 0x02, 0x80, 0xA9, 0x09, 0x00, 0x50, 0x03, 0x14, 0x24, 0x20, 0x70, 0x28, 0x51, 0x49, 
0x2A, 0xF0, 0x0A, 0x02, 0x44, 0x10, 0x40, 0x08, 0x04, 0x52, 0x80, 0x82, 0x00, 0x02, 0x08, 0x18, 
0x00, 0x30, 0x41, 0x48, 0x04, 0x20, 0x90, 0x50, 0x08, 0x22, 0xA4, 0x41, 0x11, 0x20, 0x00, 0x00, 
0x18, 0x29, 0x00, 0x28, 0x00, 0x24, 0x00, 0xC0, 0x14, 0x30, 0x90, 0xB4, 0x25, 0x40, 0x08, 0x00, 
0x04, 0x10, 0x00, 0x28, 0x00, 0x10, 0x00, 0x20, 0x00, 0x71, 0x00, 0x90, 0x45, 0x2A, 0x49, 0x42, 
0x50, 0x42, 0x95, 0xC0, 0x0D, 0x45, 0x62, 0xB6, 0xA3, 0x78, 0x02, 0xB3, 0x51, 0x70, 0x64, 0x41, 
0xCA, 0x81, 0x90, 0x82, 0xBF, 0x5C, 0x04, 0x20, 0xA9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xA0, 0xA0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x08, 0x11, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x40, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x07, 0xDE, 0x1E, 0x87, 0xEF, 0x00, 0x03, 0xFA, 
0xCE, 0xA0, 0x36, 0xC0, 0xEC, 0xC1, 0xDF, 0x81, 0xFF, 0x81, 0xFF, 0xB0, 0xFE, 0x00, 0x0F, 0xFF, 
0xFF, 0xE7, 0xFB, 0x00, 0x03, 0xEF, 0xFF, 0xF0, 0xFB, 0xC1, 0xF7, 0xE3, 0xBB, 0x87, 0xEB, 0xA7, 
0x5E, 0xF3, 0xEF, 0xC0, 0x0C, 0xF0, 0xB2, 0x75, 0x75, 0x00, 0x07, 0xFF, 0xDF, 0xF9, 0xFF, 0xB1, 
0xDB, 0xB7, 0x75, 0xEE, 0xBF, 0xE6, 0xFB, 0xE6, 0xFB, 0xE0, 0x0E, 0x08, 0x48, 0xF6, 0xD7, 0x00, 
0x07, 0xFF, 0xFF, 0xF1, 0xE5, 0xE3, 0xED, 0xF7, 0xBE, 0xCF, 0xF6, 0xAF, 0x7E, 0xA7, 0xBE, 0xE0, 
0x0C, 0x74, 0x35, 0x26, 0xAE, 0x00, 0x02, 0xF3, 0xF7, 0xEB, 0xFF, 0xF9, 0xFF, 0x72, 0xE7, 0xEE, 
0xFF, 0xEF, 0xEF, 0xFE, 0xE7, 0xB0, 0x0E, 0x69, 0x2E, 0x56, 0x5D, 0x00, 0x03, 0xEF, 0xEB, 0xFB, 
0xFF, 0xFB, 0xAF, 0xE7, 0x7E, 0x2F, 0xB5, 0xA7, 0x5D, 0xEF, 0xEE, 0xE0, 0x0C, 0x4E, 0x56, 0xA7, 
0x26, 0x00, 0x07, 0xD3, 0xFB, 0xEB, 0xFF, 0xEB, 0xF6, 0xB7, 0xB7, 0xA5, 0xDE, 0xE5, 0xE5, 0x6E, 
0xFF, 0xF0, 0x0D, 0x62, 0x66, 0x34, 0xE0, 0x00, 0x07, 0xE2, 0xF1, 0xFB, 0xFB, 0xFD, 0x5D, 0xFE, 
0xDB, 0xFA, 0xF7, 0xEF, 0xC3, 0xFD, 0xBD, 0xB0, 0x0C, 0xE6, 0x66, 0xA6, 0xE3, 0xF8, 0x06, 0xF3, 
0xF1, 0xEB, 0xEE, 0x95, 0xEF, 0xBB, 0x7D, 0x6F, 0x7E, 0xA5, 0x6E, 0xEF, 0xEF, 0xF0, 0x0E, 0x77, 
0x56, 0x57, 0x53, 0xF0, 0x03, 0xD2, 0xF9, 0xFF, 0xFE, 0xFF, 0x7B, 0xED, 0xD7, 0xF5, 0xCB, 0xFF, 
0xFD, 0x6D, 0x7F, 0xA0, 0x0D, 0x66, 0x67, 0x34, 0xE3, 0x70, 0x07, 0xF3, 0xFB, 0xEB, 0xEB, 0xD3, 
0xA7, 0xBF, 0xAE, 0xB6, 0xFD, 0x6D, 0xFB, 0xEF, 0xFE, 0xF0, 0x0E, 0x47, 0x66, 0xB6, 0xE2, 0xB8, 
0x06, 0xF3, 0xF1, 0xFB, 0xF7, 0xF3, 0xFF, 0xFF, 0x77, 0xFB, 0xF7, 0xEE, 0xAE, 0xA5, 0xBB, 0xF0, 
0x0D, 0x67, 0xE6, 0xE3, 0xD3, 0xF0, 0x03, 0xD3, 0xF9, 0xF9, 0xFE, 0xEA, 0xDF, 0x77, 0xBA, 0xED, 
0x7F, 0x75, 0xFB, 0xF6, 0xF7, 0x40, 0x0F, 0xC6, 0xA7, 0x76, 0xA3, 0x78, 0x02, 0xB2, 0x51, 0x70, 
0xAA, 0xF1, 0xA9, 0xB2, 0xEF, 0xAF, 0xDD, 0xE3, 0xDD, 0xE3, 0xBD, 0xC0, 0x0D, 0x45, 0xE3, 0xB7, 
0xA3, 0xF8, 0x03, 0xF3, 0xD1, 0xF8, 0x7E, 0x41, 0xFF, 0xC1, 0xDC, 0x83, 0xFF, 0xDE, 0x67, 0x60, 
0xED, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0D, 0xED, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xBB, 0xE0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 
0xEE, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 
0x07, 0xDE, 0x1E, 0x87, 0xEF, 0x00, 0x03, 0xFA, 0xCE, 0xA0, 0x36, 0xC0, 0xEC, 0xC1, 0xDF, 0x81, 
0xFF, 0x81, 0xFF, 0xB0, 0xFE, 0x00, 0x0F, 0xFF, 0xFF, 0xE7, 0xFB, 0x00, 0x03, 0xEF, 0xFF, 0xF0, 
0xFB, 0xC1, 0xF7, 0xE3, 0xBB, 0x87, 0xEB, 0xA7, 0x5E, 0xF3, 0xEF, 0xC0, 0x0C, 0xF0, 0xB2, 0x75, 
0x75, 0x00, 0x07, 0xFF, 0xDF, 0xF9, 0xFF, 0xB1, 0xDB, 0xB7, 0x75, 0xEE, 0xBF, 0xE6, 0xFB, 0xE6, 
0xFB, 0xE0, 0x0E, 0x08, 0x48, 0xF6, 0xD7, 0x00, 0x07, 0xFF, 0xFF, 0xF1, 0xE5, 0xE3, 0xED, 0xF7, 
0xBE, 0xCF, 0xF6, 0xAF, 0x7E, 0xA7, 0xBE, 0xE0, 0x0C, 0x74, 0x35, 0x26, 0xAE, 0x00, 0x02, 0xF3, 
0xF7, 0xEB, 0xFF, 0xF9, 0xFF, 0x72, 0xE7, 0xEE, 0xFF, 0xEF, 0xEF, 0xFE, 0xE7, 0xB0, 0x0E, 0x69, 
0x2E, 0x56, 0x5D, 0x00, 0x03, 0xEF, 0xEB, 0xFB, 0xFF, 0xFB, 0xAF, 0xE7, 0x7E, 0x2F, 0xB5, 0xA7, 
0x5D, 0xEF, 0xEE, 0xE0, 0x0C, 0x4E, 0x56, 0xA7, 0x26, 0x00, 0x07, 0xD3, 0xFB, 0xEB, 0xFF, 0xEB, 
0xF6, 0xB7, 0xB7, 0xA5, 0xDE, 0xE5, 0xE5, 0x6E, 0xFF, 0xF0, 0x0D, 0x62, 0x66, 0x34, 0xE0, 0x00, 
0x07, 0xE2, 0xF1, 0xFB, 0xFB, 0xFD, 0x5D, 0xFE, 0xDB, 0xFA, 0xF7, 0xEF, 0xC3, 0xFD, 0xBD, 0xB0, 
0x0C, 0xE6, 0x66, 0xA6, 0xE3, 0xF8, 0x06, 0xF3, 0xF1, 0xEB, 0xEE, 0x95, 0xEF, 0xBB, 0x7D, 0x6F, 
0x7E, 0xA5, 0x6E, 0xEF, 0xEF, 0xF0, 0x0E, 0x77, 0x56, 0x57, 0x53, 0xF0, 0x03, 0xD2, 0xF9, 0xFF, 
0xFE, 0xFF, 0x7B, 0xED, 0xD7, 0xF5, 0xCB, 0xFF, 0xFD, 0x6D, 0x7F, 0xA0, 0x0D, 0x66, 0x67, 0x34, 
0xE3, 0x70, 0x07, 0xF3, 0xFB, 0xEB, 0xEB, 0xD3, 0xA7, 0xBF, 0xAE, 0xB6, 0xFD, 0x6D, 0xFB, 0xEF, 
0xFE, 0xF0, 0x0E, 0x47, 0x66, 0xB6, 0xE2, 0xB8, 0x06, 0xF3, 0xF1, 0xFB, 0xF7, 0xF3, 0xFF, 0xFF, 
0x77, 0xFB, 0xF7, 0xEE, 0xAE, 0xA5, 0xBB, 0xF0, 0x0D, 0x67, 0xE6, 0xE3, 0xD3, 0xF0, 0x03, 0xD3, 
0xF9, 0xF9, 0xFE, 0xEA, 0xDF, 0x77, 0xBA, 0xED, 0x7F, 0x75, 0xFB, 0xF6, 0xF7, 0x40, 0x0F, 0xC6, 
0xA7, 0x76, 0xA3, 0x78, 0x02, 0xB2, 0x51, 0x70, 0xAA, 0xF1, 0xA9, 0xB2, 0xEF, 0xAF, 0xDD, 0xE3, 
0xDD, 0xE3, 0xBD, 0xC0, 0x0D, 0x45, 0xE3, 0xB7, 0xA3, 0xF8, 0x03, 0xF3, 0xD1, 0xF8, 0x7E, 0x41, 
0xFF, 0xC1, 0xDC, 0x83, 0xFF, 0xDE, 0x67, 0x60, 0xED, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xED, 0xE0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0E, 0xBB, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xEE, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xC0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x80, 0x0E, 0x00, 0x00, 0x07, 
0x87, 0xC0, 0x1F, 0x00, 0x3F, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0xF1, 0x40, 0x3D, 0x00, 0x07, 0xFB, 
0xF9, 0xC7, 0xFE, 0x00, 0x03, 0xFF, 0xEF, 0xE0, 0x7F, 0xE0, 0xFF, 0xE1, 0xFF, 0xC3, 0xFF, 0xC3, 
0xFF, 0xE1, 0xFF, 0x80, 0x04, 0x60, 0xE0, 0x64, 0x63, 0x00, 0x00, 0x71, 0x75, 0xF0, 0xFF, 0xF1, 
0xFF, 0xE3, 0xFF, 0xC7, 0xFF, 0xE7, 0xFF, 0xF3, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x24, 0x06, 0x00, 
0x00, 0x08, 0xB7, 0x59, 0x7F, 0xF8, 0xFF, 0xF3, 0xFF, 0xE3, 0xFF, 0xE7, 0xFF, 0xF7, 0xFF, 0xE0, 
0x04, 0x18, 0x1C, 0x34, 0x03, 0x00, 0x02, 0x1E, 0x5E, 0xF8, 0xFB, 0x78, 0xFB, 0xF1, 0xFF, 0xE7, 
0xEB, 0xE3, 0xFF, 0xE7, 0xFF, 0xE0, 0x04, 0x3C, 0x34, 0x24, 0x1E, 0x00, 0x00, 0x3E, 0x3E, 0xBA, 
0xB0, 0x78, 0xFF, 0xD1, 0xFF, 0xC3, 0xFF, 0xE7, 0xEF, 0xF3, 0xF7, 0xF0, 0x04, 0x64, 0x66, 0x34, 
0x3A, 0x00, 0x00, 0x30, 0xB0, 0x78, 0xFF, 0x7C, 0xFF, 0xE7, 0xFF, 0xC7, 0xFF, 0xE7, 0xC3, 0xF7, 
0xFF, 0xF0, 0x04, 0x44, 0x22, 0x24, 0x30, 0x00, 0x00, 0x30, 0xB8, 0x38, 0xDF, 0xF9, 0xFF, 0xF3, 
0xFF, 0xE7, 0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0xF0, 0x04, 0x44, 0x22, 0x34, 0x23, 0xF0, 0x02, 0x32, 
0x58, 0x78, 0xFF, 0xFC, 0xFF, 0xF1, 0xFF, 0xF7, 0xFF, 0xE7, 0xC3, 0xF7, 0xFF, 0xF0, 0x04, 0x44, 
0x62, 0x24, 0x62, 0xB8, 0x00, 0x30, 0xB1, 0x5A, 0xBB, 0xF9, 0xFF, 0xFB, 0xFF, 0xF7, 0xF3, 0xE7, 
0xEF, 0xF7, 0xE7, 0xF0, 0x04, 0x44, 0x22, 0x34, 0x22, 0x18, 0x00, 0x30, 0x50, 0x7A, 0xFF, 0xF9, 
0xFC, 0xFB, 0xFB, 0xF7, 0xCF, 0xE7, 0xFF, 0xF7, 0xFF, 0xE0, 0x04, 0x64, 0x22, 0x24, 0x22, 0x30, 
0x02, 0x30, 0x78, 0x79, 0xFF, 0xF9, 0xFF, 0xF7, 0xFF, 0xE7, 0xFF, 0xE7, 0xFF, 0xF7, 0xFF, 0xE0, 
0x04, 0x44, 0x22, 0x34, 0x62, 0x18, 0x02, 0xB2, 0xB1, 0x58, 0xFF, 0xF1, 0xFF, 0xF3, 0xFF, 0xEF, 
0xFF, 0xE7, 0xFF, 0xE3, 0xFF, 0xE0, 0x07, 0xE7, 0xE3, 0xE7, 0xE3, 0xF0, 0x03, 0xF1, 0xF9, 0xF8, 
0xFF, 0xC0, 0xFF, 0xE3, 0xFF, 0xC7, 0xFF, 0xF1, 0xFF, 0xF1, 0xFF, 0x80, 0x02, 0x82, 0x81, 0x41, 
0x40, 0x80, 0x01, 0x40, 0xA0, 0x88, 0x1F, 0x80, 0x3F, 0x40, 0x7F, 0x01, 0xE0, 0xA3, 0xF3, 0xF0, 
0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00};

static _UBYTE mrm_RS0_4CMASK[] = {
0x07, 0xDF, 0x1F, 0x87, 0xEF, 0x00, 0x03, 0xFF, 0xCF, 0xE0, 0x3F, 0xC0, 0xFF, 0xC1, 0xFF, 0x81, 
0xFF, 0x81, 0xFF, 0xF0, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xE7, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 
0xFF, 0xE1, 0xFF, 0xE3, 0xFF, 0xC7, 0xFF, 0xE7, 0xFF, 0xF3, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0xF7, 
0xFF, 0x00, 0x07, 0xFF, 0xFF, 0xF9, 0xFF, 0xF1, 0xFF, 0xF7, 0xFF, 0xEF, 0xFF, 0xE7, 0xFF, 0xF7, 
0xFF, 0xE0, 0x0F, 0xFF, 0xFF, 0xF7, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0xF9, 0xFF, 0xFB, 0xFF, 0xF7, 
0xFF, 0xEF, 0xFF, 0xEF, 0xFF, 0xF7, 0xFF, 0xE0, 0x0F, 0xFF, 0xFF, 0xF7, 0xFF, 0x00, 0x03, 0xFF, 
0xFF, 0xFB, 0xFF, 0xF9, 0xFF, 0xF3, 0xFF, 0xEF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 
0xFF, 0xF7, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0xFB, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 0xEF, 0xFF, 0xE7, 
0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xEF, 0xF7, 0xF7, 0xFE, 0x00, 0x07, 0xF3, 0xFB, 0xFB, 0xFF, 0xFF, 
0xFF, 0xF7, 0xFF, 0xE7, 0xFF, 0xE7, 0xE7, 0xFF, 0xFF, 0xF0, 0x0F, 0xE7, 0xE7, 0xF7, 0xF0, 0x00, 
0x07, 0xF3, 0xF9, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xC3, 0xFF, 0xFF, 0xF0, 
0x0F, 0xE7, 0xE7, 0xF7, 0xE3, 0xF8, 0x07, 0xF3, 0xF9, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xE7, 0xEF, 0xFF, 0xFF, 0xF0, 0x0F, 0xF7, 0xF7, 0xF7, 0xF3, 0xF8, 0x03, 0xF3, 0xF9, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xE7, 0xE7, 0xF7, 
0xE3, 0xF8, 0x07, 0xF3, 0xFB, 0xFB, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xF0, 0x0F, 0xE7, 0xE7, 0xF7, 0xE3, 0xF8, 0x07, 0xF3, 0xF9, 0xFB, 0xFF, 0xFB, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xF0, 0x0F, 0xE7, 0xE7, 0xF7, 0xF3, 0xF8, 0x03, 0xF3, 
0xF9, 0xF9, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xE0, 0x0F, 0xE7, 
0xE7, 0xF7, 0xE3, 0xF8, 0x03, 0xF3, 0xF9, 0xF8, 0xFF, 0xF1, 0xFF, 0xF3, 0xFF, 0xEF, 0xFF, 0xFF, 
0xFF, 0xF3, 0xFF, 0xC0, 0x0F, 0xC7, 0xE3, 0xF7, 0xE3, 0xF8, 0x03, 0xF3, 0xF1, 0xF8, 0x7F, 0xC1, 
0xFF, 0xC1, 0xFF, 0x83, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00};


BITBLK rs_bitblk[NUM_BB] = {
	{ CP mrm_IMAGE0, 4, 20, 0, 0, 11 },
	{ CP mrm_IMAGE1, 4, 20, 0, 0, 10 },
	{ CP mrm_IMAGE2, 4, 20, 0, 0, 14 }
};


CICON rs_cicon[] = {
	{ 4, (_WORD *) mrm_RS0_4CDATA, (_WORD *) mrm_RS0_4CMASK, 0, 0, 0 }
};


CICONBLK rs_ciconblk[] = {
	{ { (_WORD *) mrm_RS0_MMASK, (_WORD *) mrm_RS0_MDATA, mrm_string_70, 4096,98,4, 0,0,176,20, 113,3,6,8 }, &rs_cicon[0] }
};



#define RSC_HAS_PALETTE 1
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if (RSC_STATIC_FILE && RSC_NAMED_FUNCTIONS) || RSC_USE_PALETTE
#if RSC_USE_PALETTE && !RSC_NAMED_FUNCTIONS && RSC_STATIC_FILE
_WORD rgb_palette[][4] = {
#else
_WORD rgb_palette[][4] = {
#endif
	{ 0x03E8, 0x03E8, 0x03E8, 0x0000 },
	{ 0x03E8, 0x0000, 0x0000, 0x0002 },
	{ 0x0000, 0x03E8, 0x0000, 0x0003 },
	{ 0x03E8, 0x03E8, 0x0000, 0x0006 },
	{ 0x0000, 0x0000, 0x03E8, 0x0004 },
	{ 0x03E8, 0x0000, 0x03E8, 0x0007 },
	{ 0x0000, 0x03E8, 0x03E8, 0x0005 },
	{ 0x0320, 0x0320, 0x0320, 0x0008 },
	{ 0x0215, 0x0215, 0x0215, 0x0009 },
	{ 0x0215, 0x0000, 0x0000, 0x000A },
	{ 0x0000, 0x0215, 0x0000, 0x000B },
	{ 0x0215, 0x0215, 0x0000, 0x000E },
	{ 0x0000, 0x0000, 0x0215, 0x000C },
	{ 0x0215, 0x0000, 0x0215, 0x000F },
	{ 0x0000, 0x0215, 0x0215, 0x000D },
	{ 0x0000, 0x0000, 0x0000, 0x00FF },
	{ 0x03E0, 0x03E0, 0x03E0, 0x0010 },
	{ 0x039D, 0x039D, 0x039D, 0x0011 },
	{ 0x035A, 0x035A, 0x035A, 0x0012 },
	{ 0x0318, 0x0318, 0x0318, 0x0013 },
	{ 0x02D5, 0x02D5, 0x02D5, 0x0014 },
	{ 0x0292, 0x0292, 0x0292, 0x0015 },
	{ 0x0250, 0x0250, 0x0250, 0x0016 },
	{ 0x0211, 0x0211, 0x0211, 0x0017 },
	{ 0x01CE, 0x01CE, 0x01CE, 0x0018 },
	{ 0x018C, 0x018C, 0x018C, 0x0019 },
	{ 0x0149, 0x0149, 0x0149, 0x001A },
	{ 0x0106, 0x0106, 0x0106, 0x001B },
	{ 0x00C4, 0x00C4, 0x00C4, 0x001C },
	{ 0x0081, 0x0081, 0x0081, 0x001D },
	{ 0x003F, 0x003F, 0x003F, 0x001E },
	{ 0x0000, 0x0000, 0x0000, 0x001F },
	{ 0x03E0, 0x0000, 0x0000, 0x0020 },
	{ 0x03E0, 0x0000, 0x003F, 0x0021 },
	{ 0x03E0, 0x0000, 0x0081, 0x0022 },
	{ 0x03E0, 0x0000, 0x00C4, 0x0023 },
	{ 0x03E0, 0x0000, 0x0106, 0x0024 },
	{ 0x03E0, 0x0000, 0x0149, 0x0025 },
	{ 0x03E0, 0x0000, 0x018C, 0x0026 },
	{ 0x03E0, 0x0000, 0x01CE, 0x0027 },
	{ 0x03E0, 0x0000, 0x0211, 0x0028 },
	{ 0x03E0, 0x0000, 0x0250, 0x0029 },
	{ 0x03E0, 0x0000, 0x0292, 0x002A },
	{ 0x03E0, 0x0000, 0x02D5, 0x002B },
	{ 0x03E0, 0x0000, 0x0318, 0x002C },
	{ 0x03E0, 0x0000, 0x035A, 0x002D },
	{ 0x03E0, 0x0000, 0x039D, 0x002E },
	{ 0x03E0, 0x0000, 0x03E0, 0x002F },
	{ 0x039D, 0x0000, 0x03E0, 0x0030 },
	{ 0x035A, 0x0000, 0x03E0, 0x0031 },
	{ 0x0318, 0x0000, 0x03E0, 0x0032 },
	{ 0x02D5, 0x0000, 0x03E0, 0x0033 },
	{ 0x0292, 0x0000, 0x03E0, 0x0034 },
	{ 0x0250, 0x0000, 0x03E0, 0x0035 },
	{ 0x0211, 0x0000, 0x03E0, 0x0036 },
	{ 0x01CE, 0x0000, 0x03E0, 0x0037 },
	{ 0x018C, 0x0000, 0x03E0, 0x0038 },
	{ 0x0149, 0x0000, 0x03E0, 0x0039 },
	{ 0x0106, 0x0000, 0x03E0, 0x003A },
	{ 0x00C4, 0x0000, 0x03E0, 0x003B },
	{ 0x0081, 0x0000, 0x03E0, 0x003C },
	{ 0x003F, 0x0000, 0x03E0, 0x003D },
	{ 0x0000, 0x0000, 0x03E0, 0x003E },
	{ 0x0000, 0x003F, 0x03E0, 0x003F },
	{ 0x0000, 0x0081, 0x03E0, 0x0040 },
	{ 0x0000, 0x00C4, 0x03E0, 0x0041 },
	{ 0x0000, 0x0106, 0x03E0, 0x0042 },
	{ 0x0000, 0x0149, 0x03E0, 0x0043 },
	{ 0x0000, 0x018C, 0x03E0, 0x0044 },
	{ 0x0000, 0x01CE, 0x03E0, 0x0045 },
	{ 0x0000, 0x0211, 0x03E0, 0x0046 },
	{ 0x0000, 0x0250, 0x03E0, 0x0047 },
	{ 0x0000, 0x0292, 0x03E0, 0x0048 },
	{ 0x0000, 0x02D5, 0x03E0, 0x0049 },
	{ 0x0000, 0x0318, 0x03E0, 0x004A },
	{ 0x0000, 0x035A, 0x03E0, 0x004B },
	{ 0x0000, 0x039D, 0x03E0, 0x004C },
	{ 0x0000, 0x03E0, 0x03E0, 0x004D },
	{ 0x0000, 0x03E0, 0x039D, 0x004E },
	{ 0x0000, 0x03E0, 0x035A, 0x004F },
	{ 0x0000, 0x03E0, 0x0318, 0x0050 },
	{ 0x0000, 0x03E0, 0x02D5, 0x0051 },
	{ 0x0000, 0x03E0, 0x0292, 0x0052 },
	{ 0x0000, 0x03E0, 0x0250, 0x0053 },
	{ 0x0000, 0x03E0, 0x0211, 0x0054 },
	{ 0x0000, 0x03E0, 0x01CE, 0x0055 },
	{ 0x0000, 0x03E0, 0x018C, 0x0056 },
	{ 0x0000, 0x03E0, 0x0149, 0x0057 },
	{ 0x0000, 0x03E0, 0x0106, 0x0058 },
	{ 0x0000, 0x03E0, 0x00C4, 0x0059 },
	{ 0x0000, 0x03E0, 0x0081, 0x005A },
	{ 0x0000, 0x03E0, 0x003F, 0x005B },
	{ 0x0000, 0x03E0, 0x0000, 0x005C },
	{ 0x003F, 0x03E0, 0x0000, 0x005D },
	{ 0x0081, 0x03E0, 0x0000, 0x005E },
	{ 0x00C4, 0x03E0, 0x0000, 0x005F },
	{ 0x0106, 0x03E0, 0x0000, 0x0060 },
	{ 0x0149, 0x03E0, 0x0000, 0x0061 },
	{ 0x018C, 0x03E0, 0x0000, 0x0062 },
	{ 0x01CE, 0x03E0, 0x0000, 0x0063 },
	{ 0x0211, 0x03E0, 0x0000, 0x0064 },
	{ 0x0250, 0x03E0, 0x0000, 0x0065 },
	{ 0x0292, 0x03E0, 0x0000, 0x0066 },
	{ 0x02D5, 0x03E0, 0x0000, 0x0067 },
	{ 0x0318, 0x03E0, 0x0000, 0x0068 },
	{ 0x035A, 0x03E0, 0x0000, 0x0069 },
	{ 0x039D, 0x03E0, 0x0000, 0x006A },
	{ 0x03E0, 0x03E0, 0x0000, 0x006B },
	{ 0x03E0, 0x039D, 0x0000, 0x006C },
	{ 0x03E0, 0x035A, 0x0000, 0x006D },
	{ 0x03E0, 0x0318, 0x0000, 0x006E },
	{ 0x03E0, 0x02D5, 0x0000, 0x006F },
	{ 0x03E0, 0x0292, 0x0000, 0x0070 },
	{ 0x03E0, 0x0250, 0x0000, 0x0071 },
	{ 0x03E0, 0x0211, 0x0000, 0x0072 },
	{ 0x03E0, 0x01CE, 0x0000, 0x0073 },
	{ 0x03E0, 0x018C, 0x0000, 0x0074 },
	{ 0x03E0, 0x0149, 0x0000, 0x0075 },
	{ 0x03E0, 0x0106, 0x0000, 0x0076 },
	{ 0x03E0, 0x00C4, 0x0000, 0x0077 },
	{ 0x03E0, 0x0081, 0x0000, 0x0078 },
	{ 0x03E0, 0x003F, 0x0000, 0x0079 },
	{ 0x02D5, 0x0000, 0x0000, 0x007A },
	{ 0x02D5, 0x0000, 0x003F, 0x007B },
	{ 0x02D5, 0x0000, 0x0081, 0x007C },
	{ 0x02D5, 0x0000, 0x00C4, 0x007D },
	{ 0x02D5, 0x0000, 0x0106, 0x007E },
	{ 0x02D5, 0x0000, 0x0149, 0x007F },
	{ 0x02D5, 0x0000, 0x018C, 0x0080 },
	{ 0x02D5, 0x0000, 0x01CE, 0x0081 },
	{ 0x02D5, 0x0000, 0x0211, 0x0082 },
	{ 0x02D5, 0x0000, 0x0250, 0x0083 },
	{ 0x02D5, 0x0000, 0x0292, 0x0084 },
	{ 0x02D5, 0x0000, 0x02D5, 0x0085 },
	{ 0x0292, 0x0000, 0x02D5, 0x0086 },
	{ 0x0250, 0x0000, 0x02D5, 0x0087 },
	{ 0x0211, 0x0000, 0x02D5, 0x0088 },
	{ 0x01CE, 0x0000, 0x02D5, 0x0089 },
	{ 0x018C, 0x0000, 0x02D5, 0x008A },
	{ 0x0149, 0x0000, 0x02D5, 0x008B },
	{ 0x0106, 0x0000, 0x02D5, 0x008C },
	{ 0x00C4, 0x0000, 0x02D5, 0x008D },
	{ 0x0081, 0x0000, 0x02D5, 0x008E },
	{ 0x003F, 0x0000, 0x02D5, 0x008F },
	{ 0x0000, 0x0000, 0x02D5, 0x0090 },
	{ 0x0000, 0x003F, 0x02D5, 0x0091 },
	{ 0x0000, 0x0081, 0x02D5, 0x0092 },
	{ 0x0000, 0x00C4, 0x02D5, 0x0093 },
	{ 0x0000, 0x0106, 0x02D5, 0x0094 },
	{ 0x0000, 0x0149, 0x02D5, 0x0095 },
	{ 0x0000, 0x018C, 0x02D5, 0x0096 },
	{ 0x0000, 0x01CE, 0x02D5, 0x0097 },
	{ 0x0000, 0x0211, 0x02D5, 0x0098 },
	{ 0x0000, 0x0250, 0x02D5, 0x0099 },
	{ 0x0000, 0x0292, 0x02D5, 0x009A },
	{ 0x0000, 0x02D5, 0x02D5, 0x009B },
	{ 0x0000, 0x02D5, 0x0292, 0x009C },
	{ 0x0000, 0x02D5, 0x0250, 0x009D },
	{ 0x0000, 0x02D5, 0x0211, 0x009E },
	{ 0x0000, 0x02D5, 0x01CE, 0x009F },
	{ 0x0000, 0x02D5, 0x018C, 0x00A0 },
	{ 0x0000, 0x02D5, 0x0149, 0x00A1 },
	{ 0x0000, 0x02D5, 0x0106, 0x00A2 },
	{ 0x0000, 0x02D5, 0x00C4, 0x00A3 },
	{ 0x0000, 0x02D5, 0x0081, 0x00A4 },
	{ 0x0000, 0x02D5, 0x003F, 0x00A5 },
	{ 0x0000, 0x02D5, 0x0000, 0x00A6 },
	{ 0x003F, 0x02D5, 0x0000, 0x00A7 },
	{ 0x0081, 0x02D5, 0x0000, 0x00A8 },
	{ 0x00C4, 0x02D5, 0x0000, 0x00A9 },
	{ 0x0106, 0x02D5, 0x0000, 0x00AA },
	{ 0x0149, 0x02D5, 0x0000, 0x00AB },
	{ 0x018C, 0x02D5, 0x0000, 0x00AC },
	{ 0x01CE, 0x02D5, 0x0000, 0x00AD },
	{ 0x0211, 0x02D5, 0x0000, 0x00AE },
	{ 0x0250, 0x02D5, 0x0000, 0x00AF },
	{ 0x0292, 0x02D5, 0x0000, 0x00B0 },
	{ 0x02D5, 0x02D5, 0x0000, 0x00B1 },
	{ 0x02D5, 0x0292, 0x0000, 0x00B2 },
	{ 0x02D5, 0x0250, 0x0000, 0x00B3 },
	{ 0x02D5, 0x0211, 0x0000, 0x00B4 },
	{ 0x02D5, 0x01CE, 0x0000, 0x00B5 },
	{ 0x02D5, 0x018C, 0x0000, 0x00B6 },
	{ 0x02D5, 0x0149, 0x0000, 0x00B7 },
	{ 0x02D5, 0x0106, 0x0000, 0x00B8 },
	{ 0x02D5, 0x00C4, 0x0000, 0x00B9 },
	{ 0x02D5, 0x0081, 0x0000, 0x00BA },
	{ 0x02D5, 0x003F, 0x0000, 0x00BB },
	{ 0x01CE, 0x0000, 0x0000, 0x00BC },
	{ 0x01CE, 0x0000, 0x003F, 0x00BD },
	{ 0x01CE, 0x0000, 0x0081, 0x00BE },
	{ 0x01CE, 0x0000, 0x00C4, 0x00BF },
	{ 0x01CE, 0x0000, 0x0106, 0x00C0 },
	{ 0x01CE, 0x0000, 0x0149, 0x00C1 },
	{ 0x01CE, 0x0000, 0x018C, 0x00C2 },
	{ 0x01CE, 0x0000, 0x01CE, 0x00C3 },
	{ 0x018C, 0x0000, 0x01CE, 0x00C4 },
	{ 0x0149, 0x0000, 0x01CE, 0x00C5 },
	{ 0x0106, 0x0000, 0x01CE, 0x00C6 },
	{ 0x00C4, 0x0000, 0x01CE, 0x00C7 },
	{ 0x0081, 0x0000, 0x01CE, 0x00C8 },
	{ 0x003F, 0x0000, 0x01CE, 0x00C9 },
	{ 0x0000, 0x0000, 0x01CE, 0x00CA },
	{ 0x0000, 0x003F, 0x01CE, 0x00CB },
	{ 0x0000, 0x0081, 0x01CE, 0x00CC },
	{ 0x0000, 0x00C4, 0x01CE, 0x00CD },
	{ 0x0000, 0x0106, 0x01CE, 0x00CE },
	{ 0x0000, 0x0149, 0x01CE, 0x00CF },
	{ 0x0000, 0x018C, 0x01CE, 0x00D0 },
	{ 0x0000, 0x01CE, 0x01CE, 0x00D1 },
	{ 0x0000, 0x01CE, 0x018C, 0x00D2 },
	{ 0x0000, 0x01CE, 0x0149, 0x00D3 },
	{ 0x0000, 0x01CE, 0x0106, 0x00D4 },
	{ 0x0000, 0x01CE, 0x00C4, 0x00D5 },
	{ 0x0000, 0x01CE, 0x0081, 0x00D6 },
	{ 0x0000, 0x01CE, 0x003F, 0x00D7 },
	{ 0x0000, 0x01CE, 0x0000, 0x00D8 },
	{ 0x003F, 0x01CE, 0x0000, 0x00D9 },
	{ 0x0081, 0x01CE, 0x0000, 0x00DA },
	{ 0x00C4, 0x01CE, 0x0000, 0x00DB },
	{ 0x0106, 0x01CE, 0x0000, 0x00DC },
	{ 0x0149, 0x01CE, 0x0000, 0x00DD },
	{ 0x018C, 0x01CE, 0x0000, 0x00DE },
	{ 0x01CE, 0x01CE, 0x0000, 0x00DF },
	{ 0x01CE, 0x018C, 0x0000, 0x00E0 },
	{ 0x01CE, 0x0149, 0x0000, 0x00E1 },
	{ 0x01CE, 0x0106, 0x0000, 0x00E2 },
	{ 0x01CE, 0x00C4, 0x0000, 0x00E3 },
	{ 0x01CE, 0x0081, 0x0000, 0x00E4 },
	{ 0x01CE, 0x003F, 0x0000, 0x00E5 },
	{ 0x0106, 0x0000, 0x0000, 0x00E6 },
	{ 0x0106, 0x0000, 0x003F, 0x00E7 },
	{ 0x0106, 0x0000, 0x0081, 0x00E8 },
	{ 0x0106, 0x0000, 0x00C4, 0x00E9 },
	{ 0x0106, 0x0000, 0x0106, 0x00EA },
	{ 0x00C4, 0x0000, 0x0106, 0x00EB },
	{ 0x0081, 0x0000, 0x0106, 0x00EC },
	{ 0x003F, 0x0000, 0x0106, 0x00ED },
	{ 0x0000, 0x0000, 0x0106, 0x00EE },
	{ 0x0000, 0x003F, 0x0106, 0x00EF },
	{ 0x0000, 0x0081, 0x0106, 0x00F0 },
	{ 0x0000, 0x00C4, 0x0106, 0x00F1 },
	{ 0x0000, 0x0106, 0x0106, 0x00F2 },
	{ 0x0000, 0x0106, 0x00C4, 0x00F3 },
	{ 0x0000, 0x0106, 0x0081, 0x00F4 },
	{ 0x0000, 0x0106, 0x003F, 0x00F5 },
	{ 0x0000, 0x0106, 0x0000, 0x00F6 },
	{ 0x003F, 0x0106, 0x0000, 0x00F7 },
	{ 0x0081, 0x0106, 0x0000, 0x00F8 },
	{ 0x00C4, 0x0106, 0x0000, 0x00F9 },
	{ 0x0106, 0x0106, 0x0000, 0x00FA },
	{ 0x0106, 0x00C4, 0x0000, 0x00FB },
	{ 0x0106, 0x0081, 0x0000, 0x00FC },
	{ 0x0106, 0x003F, 0x0000, 0x00FD },
	{ 0x03E0, 0x03E0, 0x03E0, 0x00FE },
	{ 0x0000, 0x0000, 0x0000, 0x0001 }
};
#endif


TEDINFO rs_tedinfo[NUM_TI] = {
	{ mrm_string_0, mrm_string_1, mrm_string_2, IBM, 0, TE_LEFT, 0x1180, 0x0, -1, 13,1 },
	{ mrm_string_3, mrm_string_4, mrm_string_5, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 }, /* COMM_FIRSTLINE */
	{ mrm_string_6, mrm_string_7, mrm_string_8, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_9, mrm_string_10, mrm_string_11, SMALL, 0, TE_LEFT, 0x1171, 0x0, -1, 1,1 },
	{ mrm_string_12, mrm_string_13, mrm_string_14, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_15, mrm_string_16, mrm_string_17, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_18, mrm_string_19, mrm_string_20, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_21, mrm_string_22, mrm_string_23, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_24, mrm_string_25, mrm_string_26, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_27, mrm_string_28, mrm_string_29, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_30, mrm_string_31, mrm_string_32, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_33, mrm_string_34, mrm_string_35, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_36, mrm_string_37, mrm_string_38, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_39, mrm_string_40, mrm_string_41, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_42, mrm_string_43, mrm_string_44, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_45, mrm_string_46, mrm_string_47, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_48, mrm_string_49, mrm_string_50, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_51, mrm_string_52, mrm_string_53, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_54, mrm_string_55, mrm_string_56, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_57, mrm_string_58, mrm_string_59, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 },
	{ mrm_string_60, mrm_string_61, mrm_string_62, SMALL, 0, TE_LEFT, 0x1071, 0x0, -1, 1,1 }, /* COMM_LASTLINE */
	{ mrm_string_63, mrm_string_64, mrm_string_65, IBM, 0, TE_LEFT, 0x1100, 0x0, -1, 34,1 },
	{ mrm_string_66, mrm_string_67, mrm_string_68, IBM, 0, TE_LEFT, 0x1180, 0x0, -1, 8,1 },
	{ mrm_string_71, mrm_string_72, mrm_string_73, SMALL, 0, TE_LEFT, 0x1180, 0x0, -1, 5,1 }
};


OBJECT rs_object[NUM_OBS] = {
/* MODCOMM */

	{ -1, 1, 38, G_BOX, OF_FL3DBAK, OS_NORMAL, C_UNION(0x1100L), 0,0, 811,273 },
	{ 2, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[0]), 4,15, 1037,1 },
	{ 3, -1, -1, (44<<8)+G_IBOX, OF_SELECTABLE, OS_NORMAL, C_UNION(0xFF1100L), 1025,15, 15,1 }, /* COMM_STEP */
	{ 34, 4, 33, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x1100L), 768,1794, 1834,1292 },
	{ 27, 5, 26, G_BOX, OF_FL3DIND, OS_NORMAL, C_UNION(0xFF1171L), 768,1537, 42,2570 }, /* COMM_BOX */
	{ 6, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[1]), 1024,2048, 41,2048 }, /* COMM_FIRSTLINE */
	{ 7, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[2]), 1024,1, 41,2048 },
	{ 8, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[3]), 1024,2049, 41,2048 },
	{ 9, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[4]), 1024,2, 41,2048 },
	{ 10, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[5]), 1024,2050, 41,2048 },
	{ 11, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[6]), 1024,3, 41,2048 },
	{ 12, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[7]), 1024,2051, 41,2048 },
	{ 13, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[8]), 1024,4, 41,2048 },
	{ 14, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[9]), 1024,2052, 41,2048 },
	{ 15, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[10]), 1024,5, 41,2048 },
	{ 16, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[11]), 1024,2053, 41,2048 },
	{ 17, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[12]), 1024,6, 41,2048 },
	{ 18, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[13]), 1024,2054, 41,2048 },
	{ 19, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[14]), 1024,7, 41,2048 },
	{ 20, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[15]), 1024,2055, 41,2048 },
	{ 21, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[16]), 1024,8, 41,2048 },
	{ 22, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[17]), 1024,2056, 41,2048 },
	{ 23, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[18]), 1024,9, 41,2048 },
	{ 24, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[19]), 1024,2057, 41,2048 },
	{ 25, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[20]), 1024,10, 41,2048 }, /* COMM_LASTLINE */
	{ 26, -1, -1, G_BOX, OF_FL3DACT, OS_NORMAL, C_UNION(0x11100L), 1050,0, 768,2570 },
	{ 4, -1, -1, G_BOX, OF_FL3DACT, OS_NORMAL, C_UNION(0x11100L), 1821,0, 768,2570 },
	{ 28, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[0]), 512,256, 8192,5120 },
	{ 29, -1, -1, G_BOX, OF_NONE, OS_NORMAL, C_UNION(0x117BL), 515,256, 794,1025 },
	{ 30, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[1]), 27,256, 8192,5120 },
	{ 31, -1, -1, G_BOX, OF_NONE, OS_NORMAL, C_UNION(0x117AL), 1565,256, 515,1025 },
	{ 32, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[2]), 1566,256, 8192,5120 },
	{ 33, -1, -1, G_BOX, OF_NONE, OS_NORMAL, C_UNION(0x117EL), 1569,256, 1288,1025 },
	{ 3, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[21]), 514,1024, 33,1 },
	{ 35, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[22]), 1044,15, 1032,1 },
	{ 36, -1, -1, (44<<8)+G_IBOX, OF_SELECTABLE, OS_NORMAL, C_UNION(0xFF1100L), 18,15, 10,1 }, /* COMM_LOGFILE */
	{ 37, -1, -1, G_BUTTON, 0x605, OS_DISABLED, C_UNION(mrm_string_69), 1057,15, 8,1 }, /* COMM_CONT */
	{ 38, -1, -1, G_CICON, OF_NONE, OS_NORMAL, C_UNION(&rs_ciconblk[0]), 1044,1, 22,8192 },
	{ 0, -1, -1, G_TEXT, 0x420, OS_NORMAL, C_UNION(&rs_tedinfo[23]), 39,2048, 3,2048 }
};


OBJECT *rs_trindex[NUM_TREE] = {
	&rs_object[0] /* MODCOMM */
};





#if RSC_STATIC_FILE

#if RSC_NAMED_FUNCTIONS
#ifdef __STDC__
_WORD mrm_rsc_load(_WORD wchar, _WORD hchar)
#else
_WORD mrm_rsc_load(wchar, hchar)
_WORD wchar;
_WORD wchar;
#endif
{
#ifndef RSC_HAS_PALETTE
#  define RSC_HAS_PALETTE 0
#endif
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if RSC_HAS_PALETTE || RSC_USE_PALETTE
	W_Cicon_Setpalette(&rgb_palette[0][0]);
#endif
#if NUM_OBS != 0
	{
		_WORD Obj;
		OBJECT *tree;
		for (Obj = 0, tree = rs_object; Obj < NUM_OBS; Obj++, tree++)
		{
			tree->ob_x = wchar * (tree->ob_x & 0xff) + (tree->ob_x >> 8);
			tree->ob_y = hchar * (tree->ob_y & 0xff) + (tree->ob_y >> 8);
			tree->ob_width = wchar * (tree->ob_width & 0xff) + (tree->ob_width >> 8);
			tree->ob_height = hchar * (tree->ob_height & 0xff) + (tree->ob_height >> 8);
		}
		hfix_objs(NULL, rs_object, NUM_OBS);
	}
#endif
	return 1;
}


#ifdef __STDC__
_WORD mrm_rsc_gaddr(_WORD type, _WORD idx, void *gaddr)
#else
_WORD mrm_rsc_gaddr(type, idx, gaddr)
_WORD type;
_WORD idx;
void *gaddr;
#endif
{
	switch (type)
	{
#if NUM_TREE != 0
	case R_TREE:
		if (idx < 0 || idx >= NUM_TREE)
			return 0;
		*((OBJECT **)gaddr) = rs_trindex[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBJECT:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((OBJECT **)gaddr) = &rs_object[idx];
		break;
#endif
#if NUM_TI != 0
	case R_TEDINFO:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((TEDINFO **)gaddr) = &rs_tedinfo[idx];
		break;
#endif
#if NUM_IB != 0
	case R_ICONBLK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((ICONBLK **)gaddr) = &rs_iconblk[idx];
		break;
#endif
#if NUM_BB != 0
	case R_BITBLK:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((BITBLK **)gaddr) = &rs_bitblk[idx];
		break;
#endif
#if NUM_FRSTR != 0
	case R_STRING:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char **)gaddr) = (char *)(rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_IMAGEDATA:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK **)gaddr) = rs_frimg[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBSPEC:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((_LONG_PTR **)gaddr) = &rs_object[idx].ob_spec.index;
		break;
#endif
#if NUM_TI != 0
	case R_TEPTEXT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptext);
		break;
#endif
#if NUM_TI != 0
	case R_TEPTMPLT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptmplt);
		break;
#endif
#if NUM_TI != 0
	case R_TEPVALID:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_pvalid);
		break;
#endif
#if NUM_IB != 0
	case R_IBPMASK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pmask);
		break;
#endif
#if NUM_IB != 0
	case R_IBPDATA:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pdata);
		break;
#endif
#if NUM_IB != 0
	case R_IBPTEXT:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_ptext);
		break;
#endif
#if NUM_BB != 0
	case R_BIPDATA:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_bitblk[idx].bi_pdata);
		break;
#endif
#if NUM_FRSTR != 0
	case R_FRSTR:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_FRIMG:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK ***)gaddr) = &rs_frimg[idx];
		break;
#endif
	default:
		return 0;
	}
	return 1;
}


#ifdef __STDC__
_WORD mrm_rsc_free(void)
#else
_WORD mrm_rsc_free()
#endif
{
#if NUM_OBS != 0
	hrelease_objs(rs_object, NUM_OBS);
#endif
	return 1;
}

#endif /* RSC_NAMED_FUNCTIONS */

#else /* !RSC_STATIC_FILE */
#if 0
_WORD rs_numstrings = 74;
_WORD rs_numfrstr = 0;

_WORD rs_nuser = 0;
_WORD rs_numimages = 3;
_WORD rs_numbb = 3;
_WORD rs_numfrimg = 0;
_WORD rs_numib = 0;
_WORD rs_numcib = 1;
_WORD rs_numti = 24;
_WORD rs_numobs = 39;
_WORD rs_numtree = 1;

char rs_name[] = "mrm.rsc";

_WORD _rsc_format = 2; /* RSC_FORM_SOURCE2 */
#endif
#endif /* RSC_STATIC_FILE */
