/*
 * GEM resource C output of print
 *
 * created by ORCS 2.18
 */

#if !defined(__GNUC__) || !defined(__mc68000__)
#include <portab.h>
#endif

#ifndef __STDC__
# ifdef __PUREC__
#  define __STDC__ 1
# endif
#endif

#ifdef OS_WINDOWS
#  include <portaes.h>
#  define SHORT _WORD
#  ifdef __WIN32__
#    define _WORD signed short
#  else
#    define _WORD signed int
 #   pragma option -zE_FARDATA
#  endif
#else
#  ifdef __TURBOC__
#    include <aes.h>
#    define CP (_WORD *)
#  endif
#endif

#ifdef OS_UNIX
#  include <portaes.h>
#  define SHORT _WORD
#else
#  ifdef __GNUC__
#    ifndef __PORTAES_H__
#      if __GNUC__ < 4
#        include <aesbind.h>
#        ifndef _WORD
#          define _WORD int
#        endif
#        define CP (char *)
#      else
#        include <mt_gem.h>
#        ifndef _WORD
#          define _WORD short
#        endif
#        define CP (short *)
#      endif
#      define CW (short *)
#    endif
#  endif
#endif


#ifdef __SOZOBONX__
#  include <xgemfast.h>
#else
#  ifdef SOZOBON
#    include <aes.h>
#  endif
#endif

#ifdef MEGAMAX
#  include <gembind.h>
#  include <gemdefs.h>
#  include <obdefs.h>
#  define _WORD int
#  define SHORT int
#endif

#ifndef _VOID
#  define _VOID void
#endif

#ifndef OS_NORMAL
#  define OS_NORMAL 0x0000
#endif
#ifndef OS_SELECTED
#  define OS_SELECTED 0x0001
#endif
#ifndef OS_CROSSED
#  define OS_CROSSED 0x0002
#endif
#ifndef OS_CHECKED
#  define OS_CHECKED 0x0004
#endif
#ifndef OS_DISABLED
#  define OS_DISABLED 0x0008
#endif
#ifndef OS_OUTLINED
#  define OS_OUTLINED 0x0010
#endif
#ifndef OS_SHADOWED
#  define OS_SHADOWED 0x0020
#endif
#ifndef OS_WHITEBAK
#  define OS_WHITEBAK 0x0040
#endif
#ifndef OS_DRAW3D
#  define OS_DRAW3D 0x0080
#endif

#ifndef OF_NONE
#  define OF_NONE 0x0000
#endif
#ifndef OF_SELECTABLE
#  define OF_SELECTABLE 0x0001
#endif
#ifndef OF_DEFAULT
#  define OF_DEFAULT 0x0002
#endif
#ifndef OF_EXIT
#  define OF_EXIT 0x0004
#endif
#ifndef OF_EDITABLE
#  define OF_EDITABLE 0x0008
#endif
#ifndef OF_RBUTTON
#  define OF_RBUTTON 0x0010
#endif
#ifndef OF_LASTOB
#  define OF_LASTOB 0x0020
#endif
#ifndef OF_TOUCHEXIT
#  define OF_TOUCHEXIT 0x0040
#endif
#ifndef OF_HIDETREE
#  define OF_HIDETREE 0x0080
#endif
#ifndef OF_INDIRECT
#  define OF_INDIRECT 0x0100
#endif
#ifndef OF_FL3DIND
#  define OF_FL3DIND 0x0200
#endif
#ifndef OF_FL3DBAK
#  define OF_FL3DBAK 0x0400
#endif
#ifndef OF_FL3DACT
#  define OF_FL3DACT 0x0600
#endif
#ifndef OF_MOVEABLE
#  define OF_MOVEABLE 0x0800
#endif
#ifndef OF_POPUP
#  define OF_POPUP 0x1000
#endif

#ifndef R_CICONBLK
#  define R_CICONBLK 17
#endif
#ifndef R_CICON
#  define R_CICON 18
#endif

#ifndef G_SWBUTTON
#  define G_SWBUTTON 34
#endif
#ifndef G_POPUP
#  define G_POPUP 35
#endif
#ifndef G_EDIT
#  define G_EDIT 37
#endif
#ifndef G_SHORTCUT
#  define G_SHORTCUT 38
#endif
#ifndef G_SLIST
#  define G_SLIST 39
#endif
#ifndef G_EXTBOX
#  define G_EXTBOX 40
#endif
#ifndef G_OBLINK
#  define G_OBLINK 41
#endif

#ifndef _WORD
#  ifdef WORD
#    define _WORD WORD
#  else
#    ifdef __PUREC__
#      define _WORD int
#    else
#      define _WORD short
#    endif
#  endif
#endif

#ifndef _UBYTE
#  define _UBYTE char
#endif

#ifndef _BOOL
#  define _BOOL int
#endif

#ifndef _LONG
#  ifdef LONG
#    define _LONG LONG
#  else
#    define _LONG long
#  endif
#endif

#ifndef _ULONG
#  ifdef ULONG
#    define _ULONG ULONG
#  else
#    define _ULONG unsigned long
#  endif
#endif

#ifndef _LONG_PTR
#  define _LONG_PTR _LONG
#endif

#ifndef C_UNION
#ifdef __PORTAES_H__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __GEMLIB__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __PUREC__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __ALCYON__
#  define C_UNION(x) x
#endif
#endif
#ifndef C_UNION
#  define C_UNION(x) (_LONG_PTR)(x)
#endif

#ifndef SHORT
#  define SHORT short
#endif

#ifndef CP
#  define CP (SHORT *)
#endif

#ifndef CW
#  define CW (_WORD *)
#endif


#undef RSC_STATIC_FILE
#define RSC_STATIC_FILE 1

#include "print.h"

#ifndef RSC_NAMED_FUNCTIONS
#  define RSC_NAMED_FUNCTIONS 0
#endif

#ifndef __ALCYON__
#undef defRSHInit
#undef defRSHInitBit
#undef defRSHInitStr
#ifndef RsArraySize
#define RsArraySize(array) (_WORD)(sizeof(array)/sizeof(array[0]))
#define RsPtrArraySize(type, array) (type *)array, RsArraySize(array)
#endif
#define defRSHInit( aa, bb ) RSHInit( aa, bb, RsPtrArraySize(OBJECT *, rs_trindex), RsArraySize(rs_object) )
#define defRSHInitBit( aa, bb ) RSHInitBit( aa, bb, RsPtrArraySize(BITBLK *, rs_frimg) )
#define defRSHInitStr( aa, bb ) RSHInitStr( aa, bb, RsPtrArraySize(_UBYTE *, rs_frstr) )
#endif

#ifdef __STDC__
#ifndef W_Cicon_Setpalette
extern _BOOL W_Cicon_Setpalette(_WORD *_palette);
#endif
#ifndef hrelease_objs
extern void hrelease_objs(OBJECT *_ob, _WORD _num_objs);
#endif
#ifndef hfix_objs
extern void *hfix_objs(RSHDR *_hdr, OBJECT *_ob, _WORD _num_objs);
#endif
#endif

#ifndef RLOCAL
#  if RSC_STATIC_FILE
#    ifdef LOCAL
#      define RLOCAL LOCAL
#    else
#      define RLOCAL static
#    endif
#  else
#    define RLOCAL
#  endif
#endif


#ifndef N_
#  define N_(x)
#endif


#if RSC_STATIC_FILE
#undef NUM_STRINGS
#undef NUM_BB
#undef NUM_IB
#undef NUM_CIB
#undef NUM_CIC
#undef NUM_TI
#undef NUM_FRSTR
#undef NUM_FRIMG
#undef NUM_OBS
#undef NUM_TREE
#undef NUM_UD
#define NUM_STRINGS 215
#define NUM_BB		0
#define NUM_IB		0
#define NUM_CIB     3
#define NUM_CIC     3
#define NUM_TI		67
#define NUM_FRSTR	10
#define NUM_FRIMG	0
#define NUM_OBS     91
#define NUM_TREE	4
#define NUM_UD		0
#endif


static char print_string_0[] = "1234567890123456789012345678901234560";
static char print_string_1[] = "";
static char print_string_2[] = "";
static char print_string_3[] = "Treiber";
static char print_string_4[] = "";
static char print_string_5[] = "";
static char print_string_6[] = "123456789012345";
static char print_string_7[] = "";
static char print_string_8[] = "";
static char print_string_9[] = "Papier";
static char print_string_10[] = "";
static char print_string_11[] = "";
static char print_string_12[] = "Drucken";
static char print_string_13[] = "Format";
static char print_string_14[] = "";
static char print_string_15[] = "";
static char print_string_16[] = "";
static char print_string_17[] = "";
static char print_string_18[] = "\004";
static char print_string_19[] = "";
static char print_string_20[] = "";
static char print_string_21[] = "\003";
static char print_string_22[] = "";
static char print_string_23[] = "";
static char print_string_24[] = "00000";
static char print_string_25[] = "_____";
static char print_string_26[] = "99999";
static char print_string_27[] = "x";
static char print_string_28[] = "";
static char print_string_29[] = "";
static char print_string_30[] = "\004";
static char print_string_31[] = "";
static char print_string_32[] = "";
static char print_string_33[] = "\003";
static char print_string_34[] = "";
static char print_string_35[] = "";
static char print_string_36[] = "00000";
static char print_string_37[] = "_____";
static char print_string_38[] = "99999";
static char print_string_39[] = "y";
static char print_string_40[] = "";
static char print_string_41[] = "";
static char print_string_42[] = "\004";
static char print_string_43[] = "";
static char print_string_44[] = "";
static char print_string_45[] = "\003";
static char print_string_46[] = "";
static char print_string_47[] = "";
static char print_string_48[] = "00000";
static char print_string_49[] = "_____";
static char print_string_50[] = "99999";
static char print_string_51[] = "w";
static char print_string_52[] = "";
static char print_string_53[] = "";
static char print_string_54[] = "\004";
static char print_string_55[] = "";
static char print_string_56[] = "";
static char print_string_57[] = "\003";
static char print_string_58[] = "";
static char print_string_59[] = "";
static char print_string_60[] = "00000";
static char print_string_61[] = "_____";
static char print_string_62[] = "99999";
static char print_string_63[] = "h";
static char print_string_64[] = "";
static char print_string_65[] = "";
static char print_string_66[] = "";
static char print_string_67[] = "Position";
static char print_string_68[] = "";
static char print_string_69[] = "";
static char print_string_70[] = "12345678901";
static char print_string_71[] = "";
static char print_string_72[] = "";
static char print_string_73[] = "1234567890123456789012345678901234560";
static char print_string_74[] = "";
static char print_string_75[] = "";
static char print_string_76[] = "1234567890123456789012345678901234560";
static char print_string_77[] = "";
static char print_string_78[] = "";
static char print_string_79[] = "1234567890123456789012345678901234560";
static char print_string_80[] = "";
static char print_string_81[] = "";
static char print_string_82[] = "1234567890123456789012345678901234560";
static char print_string_83[] = "";
static char print_string_84[] = "";
static char print_string_85[] = "1234567890123456789012345678901234560";
static char print_string_86[] = "";
static char print_string_87[] = "";
static char print_string_88[] = "1234567890123456789012345678901234560";
static char print_string_89[] = "";
static char print_string_90[] = "";
static char print_string_91[] = "1234567890123456789012345678901234560";
static char print_string_92[] = "";
static char print_string_93[] = "";
static char print_string_94[] = "1234567890123456789012345678901234560";
static char print_string_95[] = "";
static char print_string_96[] = "";
static char print_string_97[] = "1234567890123456789012345678901234560";
static char print_string_98[] = "";
static char print_string_99[] = "";
static char print_string_100[] = "1234567890123456789012345678901234560";
static char print_string_101[] = "";
static char print_string_102[] = "";
static char print_string_103[] = "1234567890123456789012345678901234560";
static char print_string_104[] = "";
static char print_string_105[] = "";
static char print_string_106[] = "1234567890123456789012345678901234560";
static char print_string_107[] = "";
static char print_string_108[] = "";
static char print_string_109[] = "1234567890123456789012345678901234560";
static char print_string_110[] = "";
static char print_string_111[] = "";
static char print_string_112[] = "1234567890123456789012345678901234560";
static char print_string_113[] = "";
static char print_string_114[] = "";
static char print_string_115[] = "1234567890123456789012345678901234560";
static char print_string_116[] = "";
static char print_string_117[] = "";
static char print_string_118[] = "1234567890123456789012345678901234560";
static char print_string_119[] = "";
static char print_string_120[] = "";
static char print_string_121[] = "1234567890123456789012345678901234560";
static char print_string_122[] = "";
static char print_string_123[] = "";
static char print_string_124[] = "1234567890123456789012345678901234560";
static char print_string_125[] = "";
static char print_string_126[] = "";
static char print_string_127[] = "1234567890123456789012345678901234560";
static char print_string_128[] = "";
static char print_string_129[] = "";
static char print_string_130[] = "1234567890123456789012345678901234560";
static char print_string_131[] = "";
static char print_string_132[] = "";
static char print_string_133[] = "1234567890123456789012345678901234560";
static char print_string_134[] = "";
static char print_string_135[] = "";
static char print_string_136[] = "1234567890123456789012345678901234560";
static char print_string_137[] = "";
static char print_string_138[] = "";
static char print_string_139[] = "1234567890123456789012345678901234560";
static char print_string_140[] = "";
static char print_string_141[] = "";
static char print_string_142[] = "1234567890123456789012345678901234560";
static char print_string_143[] = "";
static char print_string_144[] = "";
static char print_string_145[] = "1234567890123456789012345678901234560";
static char print_string_146[] = "";
static char print_string_147[] = "";
static char print_string_148[] = "1234567890123456789012345678901234560";
static char print_string_149[] = "";
static char print_string_150[] = "";
static char print_string_151[] = "1234567890123456789012345678901234560";
static char print_string_152[] = "";
static char print_string_153[] = "";
static char print_string_154[] = "1234567890123456789012345678901234560";
static char print_string_155[] = "";
static char print_string_156[] = "";
static char print_string_157[] = "1234567890123456789012345678901234560";
static char print_string_158[] = "";
static char print_string_159[] = "";
static char print_string_160[] = "1234567890123456789012345678901234560";
static char print_string_161[] = "";
static char print_string_162[] = "";
static char print_string_163[] = "default";
static char print_string_164[] = "";
static char print_string_165[] = "";
static char print_string_166[] = "DIN A3";
static char print_string_167[] = "";
static char print_string_168[] = "";
static char print_string_169[] = "DIN A4";
static char print_string_170[] = "";
static char print_string_171[] = "";
static char print_string_172[] = "DIN A5";
static char print_string_173[] = "";
static char print_string_174[] = "";
static char print_string_175[] = "DIN B5";
static char print_string_176[] = "";
static char print_string_177[] = "";
static char print_string_178[] = "US Letter";
static char print_string_179[] = "";
static char print_string_180[] = "";
static char print_string_181[] = "US Half";
static char print_string_182[] = "";
static char print_string_183[] = "";
static char print_string_184[] = "US legal";
static char print_string_185[] = "";
static char print_string_186[] = "";
static char print_string_187[] = "Double";
static char print_string_188[] = "";
static char print_string_189[] = "";
static char print_string_190[] = "Broad";
static char print_string_191[] = "";
static char print_string_192[] = "";
static char print_string_193[] = "Pixel";
static char print_string_194[] = "";
static char print_string_195[] = "";
static char print_string_196[] = "Millimeter";
static char print_string_197[] = "";
static char print_string_198[] = "";
static char print_string_199[] = "Zoll";
static char print_string_200[] = "";
static char print_string_201[] = "";
static char print_string_202[] = "Prozent";
static char print_string_203[] = "";
static char print_string_204[] = "";
static char print_string_205[] = "Kein Bild geladen!";
static char print_string_206[] = "Drucker konnte nicht initialisiert werden!";
static char print_string_207[] = "Dieses Papierformat steht nicht zur Verf\201gung!";
static char print_string_208[] = "Ausgabe von Farbbildern auf s/w-Druckern ist noch nicht m\224glich!";
static char print_string_209[] = "Ausgabe in 8 Farben ist leider noch nicht m\224glich!";
static char print_string_210[] = "Es steht nicht genug Speicher zum Drucken zur Verf\201gung!";
static char print_string_211[] = "Smurf kann den Drucker nicht \224ffnen!";
static char print_string_212[] = "Nicht genug Speicher f\201r die Aufbereitung der Bilddaten.";
static char print_string_213[] = "Smurf unterst\201tzt nur den Ausdruck \201ber GDOS. Leider ist bei Ihnen kein GDOS installiert.";
static char print_string_214[] = "Es wurden keine Druckertreiber gefunden. Drucken unm\224glich.";


static _UBYTE print_RS0_MMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static _UBYTE print_RS0_MDATA[] = {
0xFD, 0xF5, 0x50, 0x6A, 0xFB, 0x00, 0x00, 0xED, 0xFC, 0x00, 0x00, 0x7D, 0xFE, 0x01, 0x20, 0x35, 
0xFC, 0x00, 0x08, 0x3E, 0xFC, 0x0A, 0x55, 0x3D, 0xFE, 0x40, 0xA8, 0x66, 0xFC, 0x12, 0x04, 0x35, 
0xFE, 0x40, 0xB1, 0x2A, 0xFD, 0x00, 0x45, 0x35, 0xFE, 0x0F, 0xF7, 0xD5, 0xFC, 0x1F, 0xFF, 0xAA, 
0xCC, 0x5D, 0xCF, 0x55, 0xC4, 0x77, 0xCE, 0xAA, 0xC4, 0x0F, 0x87, 0x15, 0xCA, 0x02, 0x02, 0xBA, 
0xE0, 0x02, 0x00, 0x95, 0xE0, 0x90, 0x00, 0x2A, 0xE0, 0x04, 0x86, 0x2B, 0xF1, 0x20, 0xA9, 0x2A, 
0xFA, 0x09, 0x31, 0x2A, 0xFE, 0x42, 0x18, 0x35, 0xFA, 0x00, 0x12, 0x7A, 0xAA, 0x48, 0x0B, 0x7D, 
0x55, 0x01, 0xFD, 0x5E, 0xAA, 0x52, 0x10, 0x5F, 0x57, 0x46, 0x2E, 0x5F, 0xAB, 0x31, 0x92, 0xAF, 
0x57, 0x18, 0x29, 0xBF, 0xAB, 0x16, 0x29, 0xDF, 0xD5, 0x8B, 0x1F, 0xBF, 0xEA, 0x85, 0xE7, 0xDF};

static _UBYTE print_RS0_4CDATA[] = {
0xF5, 0xE8, 0x2D, 0xD2, 0xFB, 0x84, 0x00, 0x5A, 0xFC, 0x13, 0xD0, 0x6D, 0xFD, 0x4B, 0xFC, 0x2A, 
0xFE, 0x57, 0xAB, 0x35, 0xDE, 0xDF, 0xA3, 0xED, 0xFC, 0xFD, 0x83, 0xF5, 0xED, 0xBF, 0x5F, 0xF4, 
0xFD, 0xFF, 0xCF, 0x6A, 0xFF, 0xB1, 0x48, 0x2A, 0xFD, 0xC7, 0xE7, 0x95, 0xDC, 0x2B, 0xBB, 0x80, 
0xCE, 0xDD, 0xDF, 0xB2, 0xE6, 0xB5, 0xCA, 0x08, 0xC5, 0x43, 0x85, 0x92, 0xDD, 0x3C, 0x00, 0x0A, 
0xCB, 0x98, 0x86, 0x50, 0xE7, 0xFF, 0x4F, 0x48, 0xF3, 0xEE, 0x05, 0x84, 0xF3, 0xFF, 0x10, 0xE0, 
0xF9, 0xFA, 0x34, 0xD0, 0xFE, 0xE8, 0x0F, 0xE0, 0xF2, 0xF6, 0xDF, 0xB9, 0x00, 0xFE, 0x71, 0xBE, 
0x0B, 0x7F, 0x3E, 0x16, 0x08, 0xAE, 0xA6, 0x8F, 0x22, 0x19, 0x8F, 0xDF, 0x15, 0x6A, 0x35, 0xBB, 
0x22, 0xF5, 0xA6, 0xAF, 0xAB, 0x2D, 0x85, 0xB7, 0x94, 0x92, 0x1B, 0x5B, 0x52, 0x8B, 0xBF, 0x9F, 
0xF5, 0xE8, 0x2D, 0xD2, 0xFB, 0x84, 0x00, 0x5A, 0xFC, 0x13, 0xD0, 0x6D, 0xFD, 0x4B, 0xFC, 0x2A, 
0xFE, 0x57, 0xAB, 0x35, 0xDE, 0xDF, 0xA3, 0xED, 0xFC, 0xFD, 0x83, 0xF5, 0xED, 0xBF, 0x5F, 0xF4, 
0xFD, 0xFF, 0xCF, 0x6A, 0xFF, 0xB1, 0x48, 0x2A, 0xFD, 0xC7, 0xE7, 0x95, 0xDC, 0x2B, 0xBB, 0x80, 
0xCE, 0xDD, 0xDF, 0xB2, 0xE6, 0xB5, 0xCA, 0x08, 0xC5, 0x43, 0x85, 0x92, 0xDD, 0x3C, 0x00, 0x0A, 
0xCB, 0x98, 0x86, 0x50, 0xE7, 0xFF, 0x4F, 0x48, 0xF3, 0xEE, 0x05, 0x84, 0xF3, 0xFF, 0x10, 0xE0, 
0xF9, 0xFA, 0x34, 0xD0, 0xFE, 0xE8, 0x0F, 0xE0, 0xF2, 0xF6, 0xDF, 0xB9, 0x00, 0xFE, 0x71, 0xBE, 
0x0B, 0x7F, 0x3E, 0x16, 0x08, 0xAE, 0xA6, 0x8F, 0x22, 0x19, 0x8F, 0xDF, 0x15, 0x6A, 0x35, 0xBB, 
0x22, 0xF5, 0xA6, 0xAF, 0xAB, 0x2D, 0x85, 0xB7, 0x94, 0x92, 0x1B, 0x5B, 0x52, 0x8B, 0xBF, 0x9F, 
0xF5, 0xE8, 0x2D, 0xD2, 0xFB, 0x84, 0x00, 0x5A, 0xFC, 0x13, 0xD0, 0x6D, 0xFD, 0x4B, 0xFC, 0x2A, 
0xFE, 0x57, 0xAB, 0x35, 0xDE, 0xDF, 0xA3, 0xED, 0xFC, 0xFD, 0x83, 0xF5, 0xED, 0xBF, 0x5F, 0xF4, 
0xFD, 0xFF, 0xCF, 0x6A, 0xFF, 0xB1, 0x48, 0x2A, 0xFD, 0xC7, 0xE7, 0x95, 0xDC, 0x2B, 0xBB, 0x80, 
0xCE, 0xDD, 0xDF, 0xB2, 0xE6, 0xB5, 0xCA, 0x08, 0xC5, 0x43, 0x85, 0x92, 0xDD, 0x3C, 0x00, 0x0A, 
0xCB, 0x98, 0x86, 0x50, 0xE7, 0xFF, 0x4F, 0x48, 0xF3, 0xEE, 0x05, 0x84, 0xF3, 0xFF, 0x10, 0xE0, 
0xF9, 0xFA, 0x34, 0xD0, 0xFE, 0xE8, 0x0F, 0xE0, 0xF2, 0xF6, 0xDF, 0xB9, 0x00, 0xFE, 0x71, 0xBE, 
0x0B, 0x7F, 0x3E, 0x16, 0x08, 0xAE, 0xA6, 0x8F, 0x22, 0x19, 0x8F, 0xDF, 0x15, 0x6A, 0x35, 0xBB, 
0x22, 0xF5, 0xA6, 0xAF, 0xAB, 0x2D, 0x85, 0xB7, 0x94, 0x92, 0x1B, 0x5B, 0x52, 0x8B, 0xBF, 0x9F, 
0xFF, 0xFF, 0xF0, 0x7F, 0xFD, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x7F, 
0xFC, 0x00, 0x54, 0x7F, 0xFC, 0x00, 0x5C, 0x3F, 0xFE, 0x02, 0x7C, 0x3F, 0xFE, 0x00, 0xA0, 0x3F, 
0xFE, 0x00, 0x30, 0x3F, 0xFE, 0x00, 0x77, 0xBF, 0xFE, 0x0F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 
0xCC, 0x3F, 0xEF, 0x5F, 0xC4, 0x7F, 0xCF, 0xBF, 0xC4, 0x0F, 0x87, 0x3F, 0xCA, 0x03, 0x07, 0xBF, 
0xE0, 0x06, 0x01, 0xBF, 0xE0, 0x00, 0x00, 0xBF, 0xE0, 0x10, 0x82, 0x7F, 0xF0, 0x00, 0xAF, 0x3F, 
0xFA, 0x01, 0x39, 0x3F, 0xFE, 0x02, 0x18, 0x3F, 0xFE, 0x00, 0x10, 0x7E, 0xFF, 0x00, 0x0F, 0x7F, 
0xFE, 0x81, 0xFD, 0xFF, 0xFF, 0x43, 0x39, 0x7F, 0xFF, 0x66, 0x3C, 0x7F, 0xFF, 0x35, 0xBA, 0xEF, 
0xFF, 0x1A, 0x19, 0xFF, 0xFF, 0x9E, 0x3D, 0xFF, 0xFF, 0x8F, 0xBF, 0xFF, 0xFF, 0xC7, 0xE7, 0xFF};

static _UBYTE print_RS0_4CMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static _UBYTE print_RS1_MMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static _UBYTE print_RS1_MDATA[] = {
0xFD, 0xF5, 0x50, 0x6A, 0xFB, 0x00, 0x00, 0xED, 0xFC, 0x00, 0x00, 0x7D, 0xFE, 0x01, 0x20, 0x35, 
0xFC, 0x00, 0x08, 0x3E, 0xFC, 0x0A, 0x55, 0x3D, 0xFE, 0x40, 0xA8, 0x66, 0xFC, 0x12, 0x04, 0x35, 
0xFE, 0x40, 0xB1, 0x2A, 0xFD, 0x00, 0x45, 0x35, 0xFE, 0x0F, 0xF7, 0xD5, 0xFC, 0x1F, 0xFF, 0xAA, 
0xCC, 0x5D, 0xCF, 0x55, 0xC4, 0x77, 0xCE, 0xAA, 0xC4, 0x0F, 0x87, 0x15, 0xCA, 0x02, 0x02, 0xBA, 
0xE0, 0x02, 0x00, 0x95, 0xE0, 0x90, 0x00, 0x2A, 0xE0, 0x04, 0x86, 0x2B, 0xF1, 0x20, 0xA9, 0x2A, 
0xFA, 0x09, 0x31, 0x2A, 0xFE, 0x42, 0x18, 0x35, 0xFA, 0x00, 0x12, 0x7A, 0xAA, 0x48, 0x0B, 0x7D, 
0x55, 0x01, 0xFD, 0x5E, 0xAA, 0x52, 0x10, 0x5F, 0x57, 0x46, 0x2E, 0x5F, 0xAB, 0x31, 0x92, 0xAF, 
0x57, 0x18, 0x29, 0xBF, 0xAB, 0x16, 0x29, 0xDF, 0xD5, 0x8B, 0x1F, 0xBF, 0xEA, 0x85, 0xE7, 0xDF};

static _UBYTE print_RS1_4CDATA[] = {
0xF5, 0xE8, 0x2D, 0xD2, 0xFB, 0x84, 0x00, 0x5A, 0xFC, 0x13, 0xD0, 0x6D, 0xFD, 0x4B, 0xFC, 0x2A, 
0xFE, 0x57, 0xAB, 0x35, 0xDE, 0xDF, 0xA3, 0xED, 0xFC, 0xFD, 0x83, 0xF5, 0xED, 0xBF, 0x5F, 0xF4, 
0xFD, 0xFF, 0xCF, 0x6A, 0xFF, 0xB1, 0x48, 0x2A, 0xFD, 0xC7, 0xE7, 0x95, 0xDC, 0x2B, 0xBB, 0x80, 
0xCE, 0xDD, 0xDF, 0xB2, 0xE6, 0xB5, 0xCA, 0x08, 0xC5, 0x43, 0x85, 0x92, 0xDD, 0x3C, 0x00, 0x0A, 
0xCB, 0x98, 0x86, 0x50, 0xE7, 0xFF, 0x4F, 0x48, 0xF3, 0xEE, 0x05, 0x84, 0xF3, 0xFF, 0x10, 0xE0, 
0xF9, 0xFA, 0x34, 0xD0, 0xFE, 0xE8, 0x0F, 0xE0, 0xF2, 0xF6, 0xDF, 0xB9, 0x00, 0xFE, 0x71, 0xBE, 
0x0B, 0x7F, 0x3E, 0x16, 0x08, 0xAE, 0xA6, 0x8F, 0x22, 0x19, 0x8F, 0xDF, 0x15, 0x6A, 0x35, 0xBB, 
0x22, 0xF5, 0xA6, 0xAF, 0xAB, 0x2D, 0x85, 0xB7, 0x94, 0x92, 0x1B, 0x5B, 0x52, 0x8B, 0xBF, 0x9F, 
0xF5, 0xE8, 0x2D, 0xD2, 0xFB, 0x84, 0x00, 0x5A, 0xFC, 0x13, 0xD0, 0x6D, 0xFD, 0x4B, 0xFC, 0x2A, 
0xFE, 0x57, 0xAB, 0x35, 0xDE, 0xDF, 0xA3, 0xED, 0xFC, 0xFD, 0x83, 0xF5, 0xED, 0xBF, 0x5F, 0xF4, 
0xFD, 0xFF, 0xCF, 0x6A, 0xFF, 0xB1, 0x48, 0x2A, 0xFD, 0xC7, 0xE7, 0x95, 0xDC, 0x2B, 0xBB, 0x80, 
0xCE, 0xDD, 0xDF, 0xB2, 0xE6, 0xB5, 0xCA, 0x08, 0xC5, 0x43, 0x85, 0x92, 0xDD, 0x3C, 0x00, 0x0A, 
0xCB, 0x98, 0x86, 0x50, 0xE7, 0xFF, 0x4F, 0x48, 0xF3, 0xEE, 0x05, 0x84, 0xF3, 0xFF, 0x10, 0xE0, 
0xF9, 0xFA, 0x34, 0xD0, 0xFE, 0xE8, 0x0F, 0xE0, 0xF2, 0xF6, 0xDF, 0xB9, 0x00, 0xFE, 0x71, 0xBE, 
0x0B, 0x7F, 0x3E, 0x16, 0x08, 0xAE, 0xA6, 0x8F, 0x22, 0x19, 0x8F, 0xDF, 0x15, 0x6A, 0x35, 0xBB, 
0x22, 0xF5, 0xA6, 0xAF, 0xAB, 0x2D, 0x85, 0xB7, 0x94, 0x92, 0x1B, 0x5B, 0x52, 0x8B, 0xBF, 0x9F, 
0xF5, 0xE8, 0x2D, 0xD2, 0xFB, 0x84, 0x00, 0x5A, 0xFC, 0x13, 0xD0, 0x6D, 0xFD, 0x4B, 0xFC, 0x2A, 
0xFE, 0x57, 0xAB, 0x35, 0xDE, 0xDF, 0xA3, 0xED, 0xFC, 0xFD, 0x83, 0xF5, 0xED, 0xBF, 0x5F, 0xF4, 
0xFD, 0xFF, 0xCF, 0x6A, 0xFF, 0xB1, 0x48, 0x2A, 0xFD, 0xC7, 0xE7, 0x95, 0xDC, 0x2B, 0xBB, 0x80, 
0xCE, 0xDD, 0xDF, 0xB2, 0xE6, 0xB5, 0xCA, 0x08, 0xC5, 0x43, 0x85, 0x92, 0xDD, 0x3C, 0x00, 0x0A, 
0xCB, 0x98, 0x86, 0x50, 0xE7, 0xFF, 0x4F, 0x48, 0xF3, 0xEE, 0x05, 0x84, 0xF3, 0xFF, 0x10, 0xE0, 
0xF9, 0xFA, 0x34, 0xD0, 0xFE, 0xE8, 0x0F, 0xE0, 0xF2, 0xF6, 0xDF, 0xB9, 0x00, 0xFE, 0x71, 0xBE, 
0x0B, 0x7F, 0x3E, 0x16, 0x08, 0xAE, 0xA6, 0x8F, 0x22, 0x19, 0x8F, 0xDF, 0x15, 0x6A, 0x35, 0xBB, 
0x22, 0xF5, 0xA6, 0xAF, 0xAB, 0x2D, 0x85, 0xB7, 0x94, 0x92, 0x1B, 0x5B, 0x52, 0x8B, 0xBF, 0x9F, 
0xFF, 0xFF, 0xF0, 0x7F, 0xFD, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x7F, 
0xFC, 0x00, 0x54, 0x7F, 0xFC, 0x00, 0x5C, 0x3F, 0xFE, 0x02, 0x7C, 0x3F, 0xFE, 0x00, 0xA0, 0x3F, 
0xFE, 0x00, 0x30, 0x3F, 0xFE, 0x00, 0x77, 0xBF, 0xFE, 0x0F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 
0xCC, 0x3F, 0xEF, 0x5F, 0xC4, 0x7F, 0xCF, 0xBF, 0xC4, 0x0F, 0x87, 0x3F, 0xCA, 0x03, 0x07, 0xBF, 
0xE0, 0x06, 0x01, 0xBF, 0xE0, 0x00, 0x00, 0xBF, 0xE0, 0x10, 0x82, 0x7F, 0xF0, 0x00, 0xAF, 0x3F, 
0xFA, 0x01, 0x39, 0x3F, 0xFE, 0x02, 0x18, 0x3F, 0xFE, 0x00, 0x10, 0x7E, 0xFF, 0x00, 0x0F, 0x7F, 
0xFE, 0x81, 0xFD, 0xFF, 0xFF, 0x43, 0x39, 0x7F, 0xFF, 0x66, 0x3C, 0x7F, 0xFF, 0x35, 0xBA, 0xEF, 
0xFF, 0x1A, 0x19, 0xFF, 0xFF, 0x9E, 0x3D, 0xFF, 0xFF, 0x8F, 0xBF, 0xFF, 0xFF, 0xC7, 0xE7, 0xFF};

static _UBYTE print_RS1_4CMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static _UBYTE print_RS2_MMASK[] = {
0x1F, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x1F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0x80, 
0x1F, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x7F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFC, 
0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0};

static _UBYTE print_RS2_MDATA[] = {
0x1F, 0xFF, 0xFC, 0x00, 0x10, 0x00, 0x06, 0x00, 0x10, 0x70, 0x05, 0x00, 0x10, 0xC8, 0x04, 0x80, 
0x10, 0xC8, 0x04, 0x40, 0x10, 0xD0, 0x05, 0x20, 0x10, 0xE0, 0x07, 0xF0, 0x11, 0xC7, 0x80, 0x10, 
0x13, 0x63, 0x28, 0x10, 0x16, 0x22, 0x24, 0x10, 0x16, 0x34, 0x40, 0x10, 0x16, 0x18, 0x28, 0x10, 
0x17, 0x3F, 0x50, 0x10, 0x13, 0xC6, 0xA2, 0x90, 0x70, 0x01, 0x11, 0x1C, 0xD0, 0x01, 0x11, 0x1A, 
0x90, 0x02, 0x0A, 0x12, 0x90, 0x01, 0x08, 0x5A, 0xD0, 0x02, 0x95, 0x56, 0xB0, 0x01, 0x42, 0x9A, 
0x70, 0x00, 0x00, 0x1C, 0x7F, 0xFF, 0xFF, 0xFC, 0xD5, 0x55, 0x55, 0x56, 0x80, 0x00, 0x00, 0x02, 
0x80, 0x00, 0x00, 0x02, 0xDE, 0xF7, 0xBD, 0xEE, 0xA3, 0x14, 0xA5, 0x2A, 0x7F, 0xFF, 0xFF, 0xFC, 
0x1A, 0xAA, 0xAA, 0xB0, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x1F, 0xFF, 0xFF, 0xF0};

static _UBYTE print_RS2_4CDATA[] = {
0x1F, 0xFF, 0xFC, 0x00, 0x10, 0x00, 0x06, 0x00, 0x10, 0x00, 0x07, 0x00, 0x10, 0x00, 0x07, 0x80, 
0x10, 0x10, 0x07, 0xC0, 0x10, 0x28, 0x07, 0xE0, 0x11, 0x10, 0x07, 0xF0, 0x12, 0x20, 0x00, 0x10, 
0x10, 0x00, 0x00, 0x10, 0x10, 0x54, 0x00, 0x10, 0x10, 0x08, 0x08, 0x10, 0x10, 0x20, 0x14, 0x10, 
0x10, 0xC0, 0x88, 0x10, 0x10, 0x21, 0x10, 0x10, 0x70, 0x00, 0x00, 0x1C, 0x90, 0x00, 0x2A, 0x12, 
0x90, 0x00, 0x04, 0x12, 0xF0, 0x00, 0x10, 0x16, 0x90, 0x00, 0x60, 0x12, 0x90, 0x00, 0x10, 0x12, 
0x70, 0x00, 0x00, 0x1C, 0x7F, 0xFF, 0xFF, 0xFC, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 
0xFF, 0xFF, 0xFF, 0xFE, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x7F, 0xFF, 0xFF, 0xFC, 
0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFC, 0x00, 0x10, 0x00, 0x06, 0x00, 0x10, 0x00, 0x07, 0x00, 0x10, 0x00, 0x07, 0x80, 
0x10, 0x10, 0x07, 0xC0, 0x10, 0x28, 0x07, 0xE0, 0x11, 0x10, 0x07, 0xF0, 0x12, 0x20, 0x00, 0x10, 
0x10, 0x00, 0x00, 0x10, 0x10, 0x54, 0x00, 0x10, 0x10, 0x08, 0x08, 0x10, 0x10, 0x20, 0x14, 0x10, 
0x10, 0xC0, 0x88, 0x10, 0x10, 0x21, 0x10, 0x10, 0x70, 0x00, 0x00, 0x1C, 0x90, 0x00, 0x2A, 0x12, 
0x90, 0x00, 0x04, 0x12, 0xF0, 0x00, 0x10, 0x16, 0x90, 0x00, 0x60, 0x12, 0x90, 0x00, 0x10, 0x12, 
0x70, 0x00, 0x00, 0x1C, 0x7F, 0xFF, 0xFF, 0xFC, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 
0xFF, 0xFF, 0xFF, 0xFE, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x7F, 0xFF, 0xFF, 0xFC, 
0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFC, 0x00, 0x10, 0x00, 0x06, 0x00, 0x10, 0x70, 0x07, 0x00, 0x10, 0xC8, 0x07, 0x80, 
0x10, 0xD8, 0x07, 0xC0, 0x10, 0xF8, 0x07, 0xE0, 0x11, 0xF0, 0x07, 0xF0, 0x13, 0xE7, 0x80, 0x10, 
0x13, 0x63, 0x00, 0x10, 0x16, 0x76, 0x00, 0x10, 0x16, 0x3C, 0x08, 0x10, 0x16, 0x38, 0x14, 0x10, 
0x17, 0xFF, 0x88, 0x10, 0x13, 0xE7, 0x10, 0x10, 0x70, 0x00, 0x00, 0x1C, 0x90, 0x00, 0x2A, 0x12, 
0x90, 0x00, 0x04, 0x12, 0xF0, 0x00, 0x10, 0x16, 0x90, 0x00, 0x60, 0x12, 0x90, 0x00, 0x10, 0x12, 
0x70, 0x00, 0x00, 0x1C, 0x7F, 0xFF, 0xFF, 0xFC, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 
0xFF, 0xFF, 0xFF, 0xFE, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x7F, 0xFF, 0xFF, 0xFC, 
0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFC, 0x00, 0x10, 0x00, 0x06, 0x00, 0x10, 0x70, 0x05, 0x00, 0x10, 0xC8, 0x04, 0x80, 
0x10, 0xC8, 0x04, 0x40, 0x10, 0xD0, 0x04, 0x20, 0x10, 0xE0, 0x07, 0xF0, 0x11, 0xC7, 0x80, 0x10, 
0x13, 0x63, 0x38, 0x10, 0x16, 0x22, 0x64, 0x10, 0x16, 0x34, 0x64, 0x10, 0x16, 0x18, 0x68, 0x10, 
0x17, 0x3F, 0x70, 0x10, 0x13, 0xC6, 0xE3, 0xD0, 0x70, 0x01, 0xB1, 0x9C, 0xF0, 0x03, 0x11, 0x1E, 
0x90, 0x03, 0x1A, 0x1A, 0x90, 0x03, 0x0C, 0x5A, 0xF0, 0x03, 0x9F, 0xDE, 0xF0, 0x01, 0xE3, 0x9E, 
0x70, 0x00, 0x00, 0x1C, 0x7F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0x80, 0x00, 0x00, 0x02, 
0x80, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFC, 
0x1F, 0xFF, 0xFF, 0xF0, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x1F, 0xFF, 0xFF, 0xF0};

static _UBYTE print_RS2_4CMASK[] = {
0x1F, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x1F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0x80, 
0x1F, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 
0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x7F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFC, 
0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0};

static char *rs_frstr[NUM_FRSTR] = {
	print_string_205,
	print_string_206,
	print_string_207,
	print_string_208,
	print_string_209,
	print_string_210,
	print_string_211,
	print_string_212,
	print_string_213,
	print_string_214
};


static CICON rs_cicon[] = {
	{ 4, (_WORD *) print_RS0_4CDATA, (_WORD *) print_RS0_4CMASK, 0, 0, 0 },
	{ 4, (_WORD *) print_RS1_4CDATA, (_WORD *) print_RS1_4CMASK, 0, 0, 0 },
	{ 4, (_WORD *) print_RS2_4CDATA, (_WORD *) print_RS2_4CMASK, 0, 0, 0 }
};


static CICONBLK rs_ciconblk[] = {
	{ { (_WORD *) print_RS0_MMASK, (_WORD *) print_RS0_MDATA, print_string_16, 4096,24,23, 0,0,32,32, 13,13,6,8 }, &rs_cicon[0] },
	{ { (_WORD *) print_RS1_MMASK, (_WORD *) print_RS1_MDATA, print_string_17, 4096,24,23, 0,0,32,32, 13,13,6,8 }, &rs_cicon[1] },
	{ { (_WORD *) print_RS2_MMASK, (_WORD *) print_RS2_MDATA, print_string_66, 4096,17,26, 0,0,32,32, 6,15,6,8 }, &rs_cicon[2] }
};



#define RSC_HAS_PALETTE 1
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if (RSC_STATIC_FILE && RSC_NAMED_FUNCTIONS) || RSC_USE_PALETTE
#if RSC_USE_PALETTE && !RSC_NAMED_FUNCTIONS && RSC_STATIC_FILE
_WORD rgb_palette[][4] = {
#else
static _WORD rgb_palette[][4] = {
#endif
	{ 0x03E8, 0x03E8, 0x03E8, 0x0000 },
	{ 0x03E8, 0x0000, 0x0000, 0x0002 },
	{ 0x0000, 0x03E8, 0x0000, 0x0003 },
	{ 0x03E8, 0x03E8, 0x0000, 0x0006 },
	{ 0x0000, 0x0000, 0x03E8, 0x0004 },
	{ 0x03E8, 0x0000, 0x03E8, 0x0007 },
	{ 0x0000, 0x03E8, 0x03E8, 0x0005 },
	{ 0x0339, 0x0339, 0x0339, 0x0008 },
	{ 0x01FB, 0x01FB, 0x01FB, 0x0009 },
	{ 0x02CA, 0x0000, 0x0000, 0x000A },
	{ 0x0000, 0x02CA, 0x0000, 0x000B },
	{ 0x02CA, 0x02CA, 0x0000, 0x000E },
	{ 0x0000, 0x0000, 0x02CA, 0x000C },
	{ 0x02CA, 0x0000, 0x02CA, 0x000F },
	{ 0x0000, 0x02CA, 0x02CA, 0x000D },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0000 },
	{ 0x0000, 0x0000, 0x0000, 0x0001 }
};
#endif


static TEDINFO rs_tedinfo[NUM_TI] = {
	{ print_string_0, print_string_1, print_string_2, IBM, 6, TE_CNTR, 0x1100, 0x0, -1, 38,1 }, /* DRIVER_POPBUT */
	{ print_string_3, print_string_4, print_string_5, SMALL, 6, TE_LEFT, 0x1100, 0x0, -1, 8,1 },
	{ print_string_6, print_string_7, print_string_8, IBM, 6, TE_CNTR, 0x1100, 0x0, -1, 16,1 }, /* PAPER_POPBUT */
	{ print_string_9, print_string_10, print_string_11, SMALL, 6, TE_LEFT, 0x1100, 0x0, -1, 7,1 },
	{ print_string_13, print_string_14, print_string_15, SMALL, 6, TE_LEFT, 0x1100, 0x0, -1, 7,1 },
	{ print_string_18, print_string_19, print_string_20, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* X_DOWN */
	{ print_string_21, print_string_22, print_string_23, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* X_UP */
	{ print_string_24, print_string_25, print_string_26, IBM, 6, TE_CNTR, 0x1180, 0x0, -1, 6,6 }, /* XPOS */
	{ print_string_27, print_string_28, print_string_29, IBM, 6, TE_LEFT, 0x1180, 0x0, -1, 2,1 },
	{ print_string_30, print_string_31, print_string_32, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* Y_DOWN */
	{ print_string_33, print_string_34, print_string_35, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* Y_UP */
	{ print_string_36, print_string_37, print_string_38, IBM, 6, TE_CNTR, 0x1180, 0x0, -1, 6,6 }, /* YPOS */
	{ print_string_39, print_string_40, print_string_41, IBM, 6, TE_LEFT, 0x1180, 0x0, -1, 2,1 },
	{ print_string_42, print_string_43, print_string_44, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* WIDTH_DOWN */
	{ print_string_45, print_string_46, print_string_47, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* WIDTH_UP */
	{ print_string_48, print_string_49, print_string_50, IBM, 6, TE_CNTR, 0x1180, 0x0, -1, 6,6 }, /* WIDTH */
	{ print_string_51, print_string_52, print_string_53, IBM, 6, TE_LEFT, 0x1180, 0x0, -1, 2,1 },
	{ print_string_54, print_string_55, print_string_56, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* HEIGHT_DOWN */
	{ print_string_57, print_string_58, print_string_59, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 2,1 }, /* HEIGHT_UP */
	{ print_string_60, print_string_61, print_string_62, IBM, 6, TE_CNTR, 0x1180, 0x0, -1, 6,6 }, /* HEIGHT */
	{ print_string_63, print_string_64, print_string_65, IBM, 6, TE_LEFT, 0x1180, 0x0, -1, 2,1 },
	{ print_string_67, print_string_68, print_string_69, SMALL, 6, TE_LEFT, 0x1100, 0x0, -1, 9,1 },
	{ print_string_70, print_string_71, print_string_72, IBM, 6, TE_CNTR, 0x1100, 0x0, -1, 12,1 }, /* UNIT_POPBUT */
	{ print_string_73, print_string_74, print_string_75, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 }, /* DRIVER1 */
	{ print_string_76, print_string_77, print_string_78, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_79, print_string_80, print_string_81, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_82, print_string_83, print_string_84, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_85, print_string_86, print_string_87, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_88, print_string_89, print_string_90, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_91, print_string_92, print_string_93, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_94, print_string_95, print_string_96, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_97, print_string_98, print_string_99, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_100, print_string_101, print_string_102, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_103, print_string_104, print_string_105, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_106, print_string_107, print_string_108, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_109, print_string_110, print_string_111, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_112, print_string_113, print_string_114, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_115, print_string_116, print_string_117, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_118, print_string_119, print_string_120, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_121, print_string_122, print_string_123, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_124, print_string_125, print_string_126, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_127, print_string_128, print_string_129, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_130, print_string_131, print_string_132, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_133, print_string_134, print_string_135, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_136, print_string_137, print_string_138, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_139, print_string_140, print_string_141, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_142, print_string_143, print_string_144, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_145, print_string_146, print_string_147, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_148, print_string_149, print_string_150, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_151, print_string_152, print_string_153, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_154, print_string_155, print_string_156, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_157, print_string_158, print_string_159, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_160, print_string_161, print_string_162, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 38,1 },
	{ print_string_163, print_string_164, print_string_165, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 8,1 }, /* PAPER1 */
	{ print_string_166, print_string_167, print_string_168, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 7,1 }, /* PAPER2 */
	{ print_string_169, print_string_170, print_string_171, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 7,1 }, /* PAPER3 */
	{ print_string_172, print_string_173, print_string_174, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 7,1 }, /* PAPER4 */
	{ print_string_175, print_string_176, print_string_177, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 7,1 }, /* PAPER5 */
	{ print_string_178, print_string_179, print_string_180, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 10,1 }, /* PAPER6 */
	{ print_string_181, print_string_182, print_string_183, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 8,1 }, /* PAPER7 */
	{ print_string_184, print_string_185, print_string_186, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 9,1 }, /* PAPER8 */
	{ print_string_187, print_string_188, print_string_189, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 7,1 }, /* PAPER9 */
	{ print_string_190, print_string_191, print_string_192, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 6,1 }, /* PAPER10 */
	{ print_string_193, print_string_194, print_string_195, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 6,1 }, /* UNIT_PIXELS */
	{ print_string_196, print_string_197, print_string_198, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 11,1 }, /* UNIT_MM */
	{ print_string_199, print_string_200, print_string_201, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 5,1 }, /* UNIT_INCH */
	{ print_string_202, print_string_203, print_string_204, IBM, 0, TE_CNTR, 0x1180, 0x0, -1, 8,1 } /* UNIT_PERCENT */
};


static OBJECT rs_object[NUM_OBS] = {
/* PRINT_MAIN */

	{ -1, 1, 43, G_BOX, OF_FL3DBAK, OS_NORMAL, C_UNION(0x1100L), 0,0, 54,2070 },
	{ 2, -1, -1, G_BOX, OF_NONE, OS_NORMAL, C_UNION(0x117DL), 47,2, 7,1 },
	{ 3, -1, -1, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x10100L), 1537,1281, 44,2054 },
	{ 10, 4, 9, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x11100L), 1281,1025, 44,2054 },
	{ 5, -1, -1, G_BOXTEXT, 0x645, OS_SHADOWED, C_UNION(&rs_tedinfo[0]), 1025,3073, 37,1 }, /* DRIVER_POPBUT */
	{ 6, -1, -1, (45<<8)+G_IBOX, OF_SELECTABLE, OS_NORMAL, C_UNION(0x12100L), 1574,2305, 3,2049 }, /* DRIVER_CB */
	{ 7, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[1]), 1025,1, 517,2048 },
	{ 8, -1, -1, G_BOXTEXT, 0x645, OS_SHADOWED, C_UNION(&rs_tedinfo[2]), 1025,1028, 16,1 }, /* PAPER_POPBUT */
	{ 9, -1, -1, (45<<8)+G_IBOX, OF_SELECTABLE, OS_NORMAL, C_UNION(0x12100L), 1553,260, 3,2049 }, /* PAPER_CB */
	{ 3, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[3]), 1025,2051, 1028,2048 },
	{ 15, 11, 11, G_BOX, OF_FL3DBAK, OS_NORMAL, C_UNION(0x1100L), 1040,9, 1295,11 }, /* PAPER_REDRAW */
	{ 10, 12, 13, G_BOX, OF_FL3DACT, OS_SELECTED, C_UNION(0xFF1170L), 768,768, 1038,2058 }, /* POSITION_PAPER */
	{ 13, -1, -1, G_BOX, OF_NONE, OS_NORMAL, C_UNION(0xFFA070L), 3,6, 8,1 }, /* POSITION_FRAME */
	{ 11, 14, 14, (21<<8)+G_BOX, OF_NONE, OS_NORMAL, C_UNION(0x1179L), 1025,2, 4,2049 }, /* POSITION_BOX */
	{ 13, -1, -1, (21<<8)+G_BOX, OF_NONE, OS_NORMAL, C_UNION(0x1171L), 1026,1, 1536,1536 }, /* SIZE_BOX */
	{ 16, -1, -1, G_BUTTON, 0x607, OS_NORMAL, C_UNION(print_string_12), 1062,2068, 1036,1 }, /* PRINT_START */
	{ 17, -1, -1, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x10100L), 1537,2312, 13,2059 },
	{ 23, 18, 21, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x11100L), 1281,2056, 13,2059 },
	{ 19, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[4]), 1,2048, 1028,2048 },
	{ 21, 20, 20, G_BOX, 0x611, 0x9, C_UNION(0xFE1170L), 4,2, 5,2051 }, /* FORMAT_HOCH */
	{ 19, -1, -1, G_CICON, OF_NONE, OS_DISABLED, C_UNION(&rs_ciconblk[0]), 1024,3072, 8192,8192 },
	{ 17, 22, 22, G_BOX, 0x611, OS_DISABLED, C_UNION(0xFE1170L), 3,7, 7,2050 }, /* FORMAT_QUER */
	{ 21, -1, -1, G_CICON, OF_NONE, OS_DISABLED, C_UNION(&rs_ciconblk[1]), 1025,1024, 8192,8192 },
	{ 40, 24, 39, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x1100L), 1569,2058, 1036,7 }, /* ADJUST_PARENT */
	{ 25, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[5]), 2,2048, 2,1 }, /* X_DOWN */
	{ 26, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[6]), 10,2048, 2,1 }, /* X_UP */
	{ 27, -1, -1, G_FTEXT, 0x408, OS_NORMAL, C_UNION(&rs_tedinfo[7]), 1028,2048, 5,1 }, /* XPOS */
	{ 28, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[8]), 1024,2048, 1,1 },
	{ 29, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[9]), 2,2, 2,1 }, /* Y_DOWN */
	{ 30, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[10]), 10,2, 2,1 }, /* Y_UP */
	{ 31, -1, -1, G_FTEXT, 0x408, OS_NORMAL, C_UNION(&rs_tedinfo[11]), 1028,2, 5,1 }, /* YPOS */
	{ 32, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[12]), 1024,2, 1,1 },
	{ 33, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[13]), 2,4, 2,1 }, /* WIDTH_DOWN */
	{ 34, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[14]), 10,4, 2,1 }, /* WIDTH_UP */
	{ 35, -1, -1, G_FTEXT, 0x408, OS_NORMAL, C_UNION(&rs_tedinfo[15]), 1028,4, 5,1 }, /* WIDTH */
	{ 36, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[16]), 1024,4, 1,1 },
	{ 37, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[17]), 2,2053, 2,1 }, /* HEIGHT_DOWN */
	{ 38, -1, -1, (21<<8)+G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[18]), 10,2053, 2,1 }, /* HEIGHT_UP */
	{ 39, -1, -1, G_FTEXT, 0x408, OS_NORMAL, C_UNION(&rs_tedinfo[19]), 1028,2053, 5,1 }, /* HEIGHT */
	{ 23, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[20]), 1024,2053, 1,1 },
	{ 41, -1, -1, G_CICON, OF_NONE, OS_NORMAL, C_UNION(&rs_ciconblk[2]), 48,2048, 8192,8192 },
	{ 42, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[21]), 1040,2056, 6,2048 },
	{ 43, -1, -1, G_BOXTEXT, 0x645, OS_SHADOWED, C_UNION(&rs_tedinfo[22]), 1058,3080, 11,1 }, /* UNIT_POPBUT */
	{ 0, -1, -1, (45<<8)+G_IBOX, 0x21, OS_NORMAL, C_UNION(0x12100L), 1581,2312, 3,2049 }, /* UNIT_CB */

/* DRIVERS */

	{ -1, 1, 30, G_BOX, OF_FL3DBAK, OS_SHADOWED, C_UNION(0x11100L), 0,0, 38,2067 },
	{ 2, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[23]), 1024,0, 37,1 }, /* DRIVER1 */
	{ 3, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[24]), 1024,2048, 37,1 },
	{ 4, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[25]), 1024,1, 37,1 },
	{ 5, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[26]), 1024,2049, 37,1 },
	{ 6, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[27]), 1024,2, 37,1 },
	{ 7, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[28]), 1024,3, 37,1 },
	{ 8, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[29]), 1024,2051, 37,1 },
	{ 9, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[30]), 1024,4, 37,1 },
	{ 10, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[31]), 1024,2052, 37,1 },
	{ 11, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[32]), 1024,5, 37,1 },
	{ 12, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[33]), 1024,6, 37,1 },
	{ 13, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[34]), 1024,2054, 37,1 },
	{ 14, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[35]), 1024,7, 37,1 },
	{ 15, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[36]), 1024,2055, 37,1 },
	{ 16, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[37]), 1024,8, 37,1 },
	{ 17, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[38]), 1024,9, 37,1 },
	{ 18, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[39]), 1024,2057, 37,1 },
	{ 19, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[40]), 1024,10, 37,1 },
	{ 20, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[41]), 1024,2058, 37,1 },
	{ 21, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[42]), 1024,11, 37,1 },
	{ 22, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[43]), 1024,2060, 37,1 },
	{ 23, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[44]), 1024,13, 37,1 },
	{ 24, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[45]), 1024,2061, 37,1 },
	{ 25, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[46]), 1024,14, 37,1 },
	{ 26, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[47]), 1024,2062, 37,1 },
	{ 27, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[48]), 1024,2063, 37,1 },
	{ 28, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[49]), 1024,16, 37,1 },
	{ 29, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[50]), 1024,2064, 37,1 },
	{ 30, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[51]), 1024,17, 37,1 },
	{ 0, -1, -1, G_BOXTEXT, 0x620, OS_NORMAL, C_UNION(&rs_tedinfo[52]), 1024,2065, 37,1 },

/* PAPERS */

	{ -1, 1, 10, G_BOX, OF_FL3DBAK, OS_SHADOWED, C_UNION(0x11100L), 0,0, 1552,2316 },
	{ 2, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[53]), 768,768, 16,1 }, /* PAPER1 */
	{ 3, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[54]), 768,1793, 16,1 }, /* PAPER2 */
	{ 4, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[55]), 768,2818, 16,1 }, /* PAPER3 */
	{ 5, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[56]), 768,3843, 16,1 }, /* PAPER4 */
	{ 6, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[57]), 768,773, 16,1 }, /* PAPER5 */
	{ 7, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[58]), 768,1798, 16,1 }, /* PAPER6 */
	{ 8, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[59]), 768,2823, 16,1 }, /* PAPER7 */
	{ 9, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[60]), 768,3848, 16,1 }, /* PAPER8 */
	{ 10, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[61]), 768,778, 16,1 }, /* PAPER9 */
	{ 0, -1, -1, G_BOXTEXT, 0x620, OS_NORMAL, C_UNION(&rs_tedinfo[62]), 768,1803, 16,1 }, /* PAPER10 */

/* UNITS */

	{ -1, 1, 4, G_BOX, OF_FL3DBAK, OS_SHADOWED, C_UNION(0x11100L), 0,0, 1291,261 },
	{ 2, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[63]), 768,768, 11,1 }, /* UNIT_PIXELS */
	{ 3, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[64]), 768,1793, 11,1 }, /* UNIT_MM */
	{ 4, -1, -1, G_BOXTEXT, OF_FL3DACT, OS_NORMAL, C_UNION(&rs_tedinfo[65]), 768,2818, 11,1 }, /* UNIT_INCH */
	{ 0, -1, -1, G_BOXTEXT, 0x620, OS_NORMAL, C_UNION(&rs_tedinfo[66]), 768,3843, 11,1 } /* UNIT_PERCENT */
};


static OBJECT *rs_trindex[NUM_TREE] = {
	&rs_object[0], /* PRINT_MAIN */
	&rs_object[44], /* DRIVERS */
	&rs_object[75], /* PAPERS */
	&rs_object[86] /* UNITS */
};





#if RSC_STATIC_FILE

#if RSC_NAMED_FUNCTIONS
#ifdef __STDC__
_WORD print_rsc_load(_WORD wchar, _WORD hchar)
#else
_WORD print_rsc_load(wchar, hchar)
_WORD wchar;
_WORD wchar;
#endif
{
#ifndef RSC_HAS_PALETTE
#  define RSC_HAS_PALETTE 0
#endif
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if RSC_HAS_PALETTE || RSC_USE_PALETTE
	W_Cicon_Setpalette(&rgb_palette[0][0]);
#endif
#if NUM_OBS != 0
	{
		_WORD Obj;
		OBJECT *tree;
		for (Obj = 0, tree = rs_object; Obj < NUM_OBS; Obj++, tree++)
		{
			tree->ob_x = wchar * (tree->ob_x & 0xff) + (tree->ob_x >> 8);
			tree->ob_y = hchar * (tree->ob_y & 0xff) + (tree->ob_y >> 8);
			tree->ob_width = wchar * (tree->ob_width & 0xff) + (tree->ob_width >> 8);
			tree->ob_height = hchar * (tree->ob_height & 0xff) + (tree->ob_height >> 8);
		}
		hfix_objs(NULL, rs_object, NUM_OBS);
	}
#endif
	return 1;
}


#ifdef __STDC__
_WORD print_rsc_gaddr(_WORD type, _WORD idx, void *gaddr)
#else
_WORD print_rsc_gaddr(type, idx, gaddr)
_WORD type;
_WORD idx;
void *gaddr;
#endif
{
	switch (type)
	{
#if NUM_TREE != 0
	case R_TREE:
		if (idx < 0 || idx >= NUM_TREE)
			return 0;
		*((OBJECT **)gaddr) = rs_trindex[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBJECT:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((OBJECT **)gaddr) = &rs_object[idx];
		break;
#endif
#if NUM_TI != 0
	case R_TEDINFO:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((TEDINFO **)gaddr) = &rs_tedinfo[idx];
		break;
#endif
#if NUM_IB != 0
	case R_ICONBLK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((ICONBLK **)gaddr) = &rs_iconblk[idx];
		break;
#endif
#if NUM_BB != 0
	case R_BITBLK:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((BITBLK **)gaddr) = &rs_bitblk[idx];
		break;
#endif
#if NUM_FRSTR != 0
	case R_STRING:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char **)gaddr) = (char *)(rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_IMAGEDATA:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK **)gaddr) = rs_frimg[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBSPEC:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((_LONG_PTR **)gaddr) = &rs_object[idx].ob_spec.index;
		break;
#endif
#if NUM_TI != 0
	case R_TEPTEXT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptext);
		break;
#endif
#if NUM_TI != 0
	case R_TEPTMPLT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptmplt);
		break;
#endif
#if NUM_TI != 0
	case R_TEPVALID:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_pvalid);
		break;
#endif
#if NUM_IB != 0
	case R_IBPMASK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pmask);
		break;
#endif
#if NUM_IB != 0
	case R_IBPDATA:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pdata);
		break;
#endif
#if NUM_IB != 0
	case R_IBPTEXT:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_ptext);
		break;
#endif
#if NUM_BB != 0
	case R_BIPDATA:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_bitblk[idx].bi_pdata);
		break;
#endif
#if NUM_FRSTR != 0
	case R_FRSTR:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_FRIMG:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK ***)gaddr) = &rs_frimg[idx];
		break;
#endif
	default:
		return 0;
	}
	return 1;
}


#ifdef __STDC__
_WORD print_rsc_free(void)
#else
_WORD print_rsc_free()
#endif
{
#if NUM_OBS != 0
	hrelease_objs(rs_object, NUM_OBS);
#endif
	return 1;
}

#endif /* RSC_NAMED_FUNCTIONS */

#else /* !RSC_STATIC_FILE */
#if 0
_WORD rs_numstrings = 215;
_WORD rs_numfrstr = 10;

_WORD rs_nuser = 0;
_WORD rs_numimages = 0;
_WORD rs_numbb = 0;
_WORD rs_numfrimg = 0;
_WORD rs_numib = 0;
_WORD rs_numcib = 3;
_WORD rs_numti = 67;
_WORD rs_numobs = 91;
_WORD rs_numtree = 4;

char rs_name[] = "print.rsc";

_WORD _rsc_format = 2; /* RSC_FORM_SOURCE2 */
#endif
#endif /* RSC_STATIC_FILE */
